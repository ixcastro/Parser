/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import scanner.JFlexScanner;
import jcup.sym;

parser code {:
    JFlexScanner lexer;
    private Symbol tokenError;
    private ArrayList<String> errors = new ArrayList<String>();

    public void syntax_error(Symbol s){
        try {
            String lexeme = s.value.toString();
            int row = s.left + 1;
            int column = s.right;
            tokenError = s;
        } catch(Exception e) {}
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        try {
            String lexeme = s.value.toString();
            int row = s.left + 1;
            int column = s.right;
            String str = "error:e sintáctico irrecuperable, con el símbolo: " + lexeme;
            this.errors.add(str);
        } catch (Exception e) {}
    }

    public void report_error(String message, Object info) {
        if (info instanceof String){
            System.out.println(message);
        } else {
            if (info instanceof Symbol) {
                String str = "error:e sintático en: " + message;
                Symbol symbol = (Symbol)info;
                str += ", con el símbolo: \"" + symbol.value.toString() + "\"";
                this.errors.add(str);
            } else {
                System.err.println(message);
            }
        }
    }

:}

/* Terminals (tokens returned by the scanner). */
terminal    AUTO,
                BREAK,
                CASE,
                CHAR,
                CONST,
                CONTINUE,
                DEFAULT,
                DO,
                DOUBLE,
                ELSE,
                ENUM,
                EXTERN,
                FLOAT,
                FOR,
                GOTO,
                IF,
                INT,
                LONG,
                REGISTER,
                RETURN,
                SHORT,
                SIGNED,
                SIZEOF,
                STATIC,
                STRUCT,
                SWITCH,
                TYPEDEF,
                UNION,
                UNSIGNED,
                VOID,
                VOLATILE,
                WHILE,
                IDENTIFIER,
                COMMA,
                SEMICOLON,
                INCREMENT,
                DECREMENT,
                EQUAL_EQUAL,
                GREATER_EQUAL,
                GREATER,
                TERNARY,
                LESS_EQUAL,
                LESS,
                NOT_EQUAL,
                OR,
                AND,
                NOT,
                EQUAL,
                PLUS,
                MINUS,
                TIMES,
                DIV,
                MODULE,
                RBO,
                RBC,
                SBO,
                SBC,
                CBO,
                CBC,
                COLON,
                DOT,
                PLUS_ASSIGNMENT,
                MINUS_ASSIGNMENT,
                TIMES_ASSIGNMENT,
                DIV_ASSIGNMENT,
                BIT_AND,
                XOR,
                BIT_OR,
                RIGHT_SHIFT,
                LEFT_SHIFT,
                COMPLEMENT,
                MOD_ASSIGNMENT,
                AND_ASSIGNMENT,
                XOR_ASSIGNMENT,
                OR_ASSIGNMENT,
                LEFT_SHIFT_ASSIGNMENT, RIGHT_SHIFT_ASSIGNMENT, OP, ERROR, TRUE, FALSE, END_OF_FILE;

terminal Integer DEC_LIT;
terminal Integer OCTAL_LIT;
terminal Integer HEX_LIT;
terminal double DOUBLE_LIT;
terminal char CHAR_LIT;
terminal String STRING_LIT;

/* Non terminals */
non terminal    Symbol program, decls, decl, global_decls, constant_decls,
                variable_list, function_decls, global_decl, variable_decl, parameters_list,
                constant_decl, function_decl, opt_parameters, parameters, params,
                statements, statement, if_statement, opt_else, while_statement, for_statement, for_expression, switch_statement,
                switch_cases, switch_case, default_case, return_statement, assignment_expression, arithmetic_op,
                expression, variable, type, value, expression_after_bracket,
                boolean_value, assignment_op, opt_expression;

/* Precedences */
precedence nonassoc EQUAL;
precedence left OR;
precedence left AND;
precedence nonassoc NOT_EQUAL, EQUAL_EQUAL;
precedence nonassoc GREATER, GREATER_EQUAL, LESS, LESS_EQUAL;
precedence left PLUS, MINUS;
precedence left TIMES, DIV, MODULE;
precedence left NOT;
precedence nonassoc PLUS_ASSIGNMENT, MINUS_ASSIGNMENT, TIMES_ASSIGNMENT, DIV_ASSIGNMENT, MOD_ASSIGNMENT;

/* The grammar rules */
start with program;

program ::= 
          decls function_decls END_OF_FILE
        | function_decls END_OF_FILE
;

decls ::= 
          decl
        | decls decl
;

decl  ::= 
          constant_decls
        | global_decls
;

global_decls  ::=
        global_decl global_decls
;

constant_decls  ::=
        constant_decl constant_decls
;

variable_decl ::=
          variable SEMICOLON
        | variable variable_list SEMICOLON
;

variable_list ::=
            COMMA IDENTIFIER
          | variable_list COMMA IDENTIFIER
;

function_decls ::=
          function_decl 
        | function_decls function_decl
;

global_decl ::=
          variable SEMICOLON
;

constant_decl ::=
          CONST variable EQUAL expression SEMICOLON
        | CONST error:e {:
                report_error("CONST sin declaración variable", e);
                RESULT = new Symbol(-1);
        :}
;

function_decl ::=
          type IDENTIFIER RBO opt_parameters RBC CBO statements CBC
        | VOID IDENTIFIER RBO opt_parameters RBC CBO statements CBC
        | type error:e {:
                report_error("Sin identificador de función", e);
                RESULT = new Symbol(-1);
        :} RBO opt_parameters RBC CBO statements CBC
        | type IDENTIFIER error:e {:
                report_error("Sin RBO (paréntesis abierto) ", e);
                RESULT = new Symbol(-1);
        :} opt_parameters RBC CBO statements CBC
        | VOID error:e {:
                report_error("Sin identificador de función", e);
                RESULT = new Symbol(-1);
        :} RBO opt_parameters RBC CBO statements CBC
        | VOID IDENTIFIER error:e {:
                report_error("Sin RBO (paréntesis abierto) ", e);
                RESULT = new Symbol(-1);
        :} opt_parameters RBC CBO statements CBC
;

opt_parameters ::=
        | parameters
;

parameters ::=
          variable
        | parameters COMMA variable
        | parameters error:e {:
                report_error("Parámetros sin coma entre ellos", e);
                RESULT = new Symbol(-1);
        :}
;

statements ::=
          statements statement
        | statement
;

statement ::=
          if_statement
        | constant_decl
        | variable_decl
        | while_statement
        | for_statement
        | switch_statement
        | CONTINUE SEMICOLON
        | return_statement SEMICOLON
        | assignment_expression
;

if_statement ::=
          IF RBO expression RBC CBO statements CBC opt_else
        | IF error:e {:
                report_error("No tiene paréntesis abierto", e);
                RESULT = new Symbol(-1);
        :} expression RBC CBO statements CBC opt_else
        | IF RBO error:e {:
                report_error("IF sin expresión", e);
                RESULT = new Symbol(-1);
        :} RBC CBO statements CBC opt_else
        | IF RBO expression error:e {:
                report_error("No tiene paréntesis cerrado", e);
                RESULT = new Symbol(-1);
        :} CBO statements CBC opt_else

;

opt_else ::=
        | ELSE CBO statements CBC
;

while_statement ::= 
          WHILE RBO expression RBC CBO statements CBC
        | WHILE error:e {:
                report_error("No hay paréntesis al inicio de la expresión", e);
                RESULT = new Symbol(-1);
        :} expression RBC CBO statements CBC
        | WHILE RBO error:e {:
                report_error("No hay expresión para el while", e);
                RESULT = new Symbol(-1);
        :} RBC CBO statements CBC
        | WHILE RBO expression error:e {:
                report_error("No hay paréntesis al final de la expresión", e);
                RESULT = new Symbol(-1);
        :} CBO statements CBC
        | WHILE RBO expression RBC error:e {:
                report_error("No hay bloque de declaraciones", e);
                RESULT = new Symbol(-1);
        :} 
;

for_statement ::= 
          FOR RBO for_expression RBC CBO statements CBC
        | FOR error:e {:
                report_error("No hay paréntesis abierto en la expresión", e);
                RESULT = new Symbol(-1);
        :} for_expression RBC CBO statements CBC
        | FOR RBO error:e {:
                report_error("No hay expresión en el FOR", e);
                RESULT = new Symbol(-1);
        :} RBC CBO statements CBC
        | FOR RBO for_expression error:e {:
                report_error("No hay paréntesis cerrado en la expresión", e);
                RESULT = new Symbol(-1);
        :} RBC CBO statements CBC
        | FOR RBO for_expression RBC error:e {:
                report_error("No hay bloque de declaraciones", e);
                RESULT = new Symbol(-1);
        :} 
;

for_expression ::= 
          expression SEMICOLON expression SEMICOLON expression
        | expression error:e {:
                report_error("No tiene COMA entre la primera y segunda expresión del FOR", e);
                RESULT = new Symbol(-1);
        :} expression SEMICOLON expression
        | expression SEMICOLON error:e {:
                report_error("No tiene la segunda expresión del FOR ", e);
                RESULT = new Symbol(-1);
        :} SEMICOLON expression
        | expression SEMICOLON expression error:e {:
                report_error("No tiene COMA entre la segunda y tercera expresión del FOR", e);
                RESULT = new Symbol(-1);
        :} expression
        | expression SEMICOLON expression SEMICOLON error:e {:
                report_error("No tiene la tercera expresión del FOR", e);
                RESULT = new Symbol(-1);
        :} 
;

switch_statement ::= 
          SWITCH RBO expression RBC switch_cases
        | SWITCH error:e {:
                report_error("No tiene paréntesis abierto al inicio de la expresión", e);
                RESULT = new Symbol(-1);
        :} expression RBC switch_cases
        | SWITCH RBO error:e {:
                report_error("No tiene expresión para el SWITCH", e);
                RESULT = new Symbol(-1);
        :} RBC switch_cases
        | SWITCH RBO expression error:e {:
                report_error("No tiene paréntesis cerrado al final de la expresión", e);
                RESULT = new Symbol(-1);
        :} switch_cases
        | SWITCH RBO expression RBC error:e {:
                report_error("No tiene bloque de cases", e);
                RESULT = new Symbol(-1);
        :}
;

switch_cases ::=
        | switch_cases switch_case default_case
;

switch_case ::=
          CASE value COLON CBO statements CBC BREAK SEMICOLON
        | CASE value COLON 
        | CASE value COLON BREAK SEMICOLON
;

default_case ::=
          DEFAULT COLON CBO statements CBC BREAK SEMICOLON
        | DEFAULT COLON 
        | DEFAULT COLON BREAK SEMICOLON
;

return_statement ::= 
          RETURN expression
        | RETURN
;

expression ::=
          RBO expression RBC expression_after_bracket
        | MINUS expression
        | expression EQUAL_EQUAL expression
        | expression NOT_EQUAL expression
        | expression GREATER_EQUAL expression
        | expression GREATER expression
        | expression LESS_EQUAL expression
        | expression LESS expression
        | expression PLUS expression
        | expression MINUS expression
        | expression TIMES expression
        | expression DIV expression
        | expression MODULE expression
        | NOT expression
        | value
        | IDENTIFIER RBO parameters_list RBC
        | boolean_value
;

expression_after_bracket ::=
          opt_expression
        | INCREMENT
        | DECREMENT
;

assignment_op ::=
          PLUS_ASSIGNMENT
        | MINUS_ASSIGNMENT
        | TIMES_ASSIGNMENT
        | DIV_ASSIGNMENT
        | MOD_ASSIGNMENT
;

//Puede o no tener expresiones aritméticas después del paréntesis
opt_expression ::=
        | arithmetic_op expression
        | AND expression
        | OR expression
;

assignment_expression ::=
        IDENTIFIER EQUAL expression SEMICOLON
;

parameters_list ::=
        | params
;

params ::=
        expression
        | params COMMA expression
;

variable ::=
          type IDENTIFIER
;

type ::=
          INT
        | CHAR
        | LONG
        | SHORT
;

value ::= 
          DEC_LIT
        | OCTAL_LIT
        | HEX_LIT
        | DOUBLE_LIT
        | CHAR_LIT
        | IDENTIFIER
;

boolean_value ::=
          TRUE
        | FALSE
;