// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/jflex/token.jflex


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class LexScanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\12\0\1\1\2\2\1\3\22\0\1\4\1\5\1\6"+
    "\2\0\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\7\23\2\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\0\6\33\21\34"+
    "\1\35\2\34\1\36\1\37\1\40\1\41\2\0\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\53"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\1\75\1\76\6\0\1\2\u01a2\0"+
    "\2\2\326\0\u0100\2";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\0\1\3\1\1\1\4\1\5"+
    "\1\1\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\2\2\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\17\24\1\30\1\31\1\32"+
    "\1\33\1\34\1\0\1\35\1\0\1\36\1\37\2\0"+
    "\1\40\1\41\1\42\1\43\1\0\1\44\1\45\2\2"+
    "\1\0\1\46\2\0\1\47\1\50\1\51\1\52\1\53"+
    "\6\24\1\54\6\24\1\55\13\24\1\56\1\57\3\0"+
    "\2\60\1\61\13\24\1\62\1\24\1\63\17\24\1\0"+
    "\1\64\1\24\1\65\1\66\4\24\1\67\1\70\2\24"+
    "\1\71\1\72\13\24\1\73\2\24\1\2\1\74\1\75"+
    "\4\24\1\76\2\24\1\77\6\24\1\100\2\24\1\101"+
    "\2\24\1\102\1\103\1\24\1\104\1\105\1\106\1\107"+
    "\1\110\1\111\4\24\1\112\1\24\1\113\2\24\1\114"+
    "\1\115\1\116\1\117";

  private static int [] zzUnpackAction() {
    int [] result = new int[210];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\77\0\176\0\275\0\374\0\u013b\0\u017a"+
    "\0\u01b9\0\77\0\77\0\u01f8\0\u0237\0\77\0\u0276\0\77"+
    "\0\u02b5\0\u02f4\0\u0333\0\77\0\77\0\u0372\0\u03b1\0\u03f0"+
    "\0\77\0\u042f\0\77\0\77\0\u013b\0\u046e\0\u04ad\0\u04ec"+
    "\0\u052b\0\u056a\0\u05a9\0\u05e8\0\u0627\0\u0666\0\u06a5\0\u06e4"+
    "\0\u0723\0\u0762\0\u07a1\0\u07e0\0\77\0\u081f\0\77\0\77"+
    "\0\77\0\374\0\77\0\u085e\0\77\0\77\0\u089d\0\u08dc"+
    "\0\77\0\77\0\77\0\77\0\u02f4\0\77\0\77\0\u091b"+
    "\0\u095a\0\u0999\0\u09d8\0\u0a17\0\u0a56\0\u013b\0\77\0\77"+
    "\0\77\0\u013b\0\u0a95\0\u0ad4\0\u0b13\0\u0b52\0\u0b91\0\u0bd0"+
    "\0\u0c0f\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b\0\u0d4a\0\u0d89\0\u042f"+
    "\0\u0dc8\0\u0e07\0\u0e46\0\u0e85\0\u0ec4\0\u0f03\0\u0f42\0\u0f81"+
    "\0\u0fc0\0\u0fff\0\u103e\0\77\0\77\0\u107d\0\u10bc\0\u10fb"+
    "\0\u0999\0\u0a17\0\u0a56\0\u113a\0\u1179\0\u11b8\0\u11f7\0\u1236"+
    "\0\u1275\0\u12b4\0\u12f3\0\u1332\0\u1371\0\u13b0\0\u042f\0\u13ef"+
    "\0\u042f\0\u142e\0\u146d\0\u14ac\0\u14eb\0\u152a\0\u1569\0\u15a8"+
    "\0\u15e7\0\u1626\0\u1665\0\u16a4\0\u16e3\0\u1722\0\u1761\0\u17a0"+
    "\0\u17df\0\u042f\0\u181e\0\u042f\0\u042f\0\u185d\0\u189c\0\u18db"+
    "\0\u191a\0\u042f\0\u042f\0\u1959\0\u1998\0\u042f\0\u042f\0\u19d7"+
    "\0\u1a16\0\u1a55\0\u1a94\0\u1ad3\0\u1b12\0\u1b51\0\u1b90\0\u1bcf"+
    "\0\u1c0e\0\u1c4d\0\u042f\0\u1c8c\0\u1ccb\0\u10bc\0\u042f\0\u042f"+
    "\0\u1d0a\0\u1d49\0\u1d88\0\u1dc7\0\u042f\0\u1e06\0\u1e45\0\u042f"+
    "\0\u1e84\0\u1ec3\0\u1f02\0\u1f41\0\u1f80\0\u1fbf\0\u042f\0\u1ffe"+
    "\0\u203d\0\u042f\0\u207c\0\u20bb\0\u042f\0\u042f\0\u20fa\0\u042f"+
    "\0\u042f\0\u042f\0\u042f\0\u042f\0\u042f\0\u2139\0\u2178\0\u21b7"+
    "\0\u21f6\0\u042f\0\u2235\0\u042f\0\u2274\0\u22b3\0\u042f\0\u042f"+
    "\0\u042f\0\u042f";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[210];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\0\1\4\1\3\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\2\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\3\32\1\33\1\2\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\32\1\45"+
    "\2\32\1\46\4\32\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\3\32\1\55\1\56\1\57\1\60\100\0\1\3"+
    "\125\0\1\61\46\0\6\62\1\63\30\62\1\64\37\62"+
    "\30\0\1\65\56\0\1\66\17\0\1\65\46\0\1\67"+
    "\1\0\7\67\1\0\25\67\1\70\37\67\30\0\1\71"+
    "\63\0\1\72\12\0\1\73\65\0\1\74\2\0\1\75"+
    "\2\23\3\0\1\76\1\77\45\0\1\100\3\0\10\100"+
    "\1\101\62\100\1\102\3\0\16\102\2\103\1\104\10\102"+
    "\1\105\32\102\1\105\7\102\3\0\16\102\3\23\52\102"+
    "\27\0\1\106\1\107\76\0\1\110\76\0\1\111\1\112"+
    "\67\0\3\32\6\0\3\32\4\0\31\32\26\0\3\32"+
    "\6\0\3\32\4\0\23\32\1\113\5\32\26\0\3\32"+
    "\6\0\3\32\4\0\20\32\1\114\10\32\26\0\3\32"+
    "\6\0\3\32\4\0\1\115\6\32\1\116\6\32\1\117"+
    "\12\32\26\0\3\32\6\0\3\32\4\0\4\32\1\120"+
    "\11\32\1\121\12\32\26\0\3\32\6\0\3\32\4\0"+
    "\13\32\1\122\1\32\1\123\10\32\1\124\2\32\26\0"+
    "\3\32\6\0\3\32\4\0\13\32\1\125\2\32\1\126"+
    "\12\32\26\0\3\32\6\0\3\32\4\0\16\32\1\127"+
    "\12\32\26\0\3\32\6\0\3\32\4\0\5\32\1\130"+
    "\7\32\1\131\13\32\26\0\3\32\6\0\3\32\4\0"+
    "\16\32\1\132\12\32\26\0\3\32\6\0\3\32\4\0"+
    "\4\32\1\133\24\32\26\0\3\32\6\0\3\32\4\0"+
    "\7\32\1\134\1\135\11\32\1\136\2\32\1\137\3\32"+
    "\26\0\3\32\6\0\3\32\4\0\27\32\1\140\1\32"+
    "\26\0\3\32\6\0\3\32\4\0\15\32\1\141\13\32"+
    "\26\0\3\32\6\0\3\32\4\0\16\32\1\142\12\32"+
    "\26\0\3\32\6\0\3\32\4\0\7\32\1\143\21\32"+
    "\34\0\1\65\43\0\1\144\10\0\1\62\24\0\3\62"+
    "\1\0\1\62\2\0\31\62\15\0\1\145\127\0\26\67"+
    "\1\146\2\67\4\0\1\100\3\0\73\100\1\101\1\147"+
    "\1\0\1\150\73\101\22\0\3\151\52\0\1\102\3\0"+
    "\16\102\2\103\1\152\53\102\3\0\16\102\3\152\52\102"+
    "\22\0\3\153\6\0\1\153\6\0\6\153\51\0\3\32"+
    "\6\0\3\32\4\0\22\32\1\154\6\32\26\0\3\32"+
    "\6\0\3\32\4\0\4\32\1\155\24\32\26\0\3\32"+
    "\6\0\3\32\4\0\21\32\1\156\7\32\26\0\3\32"+
    "\6\0\3\32\4\0\1\157\30\32\26\0\3\32\6\0"+
    "\3\32\4\0\15\32\1\160\13\32\26\0\3\32\6\0"+
    "\3\32\4\0\5\32\1\161\23\32\26\0\3\32\6\0"+
    "\3\32\4\0\23\32\1\162\5\32\26\0\3\32\6\0"+
    "\3\32\4\0\21\32\1\163\7\32\26\0\3\32\6\0"+
    "\3\32\4\0\23\32\1\164\5\32\26\0\3\32\6\0"+
    "\3\32\4\0\22\32\1\165\6\32\26\0\3\32\6\0"+
    "\3\32\4\0\16\32\1\166\12\32\26\0\3\32\6\0"+
    "\3\32\4\0\20\32\1\167\10\32\26\0\3\32\6\0"+
    "\3\32\4\0\22\32\1\170\6\32\26\0\3\32\6\0"+
    "\3\32\4\0\22\32\1\171\6\32\26\0\3\32\6\0"+
    "\3\32\4\0\15\32\1\172\13\32\26\0\3\32\6\0"+
    "\3\32\4\0\6\32\1\173\13\32\1\174\6\32\26\0"+
    "\3\32\6\0\3\32\4\0\16\32\1\175\12\32\26\0"+
    "\3\32\6\0\3\32\4\0\6\32\1\176\21\32\1\177"+
    "\26\0\3\32\6\0\3\32\4\0\1\200\17\32\1\201"+
    "\10\32\26\0\3\32\6\0\3\32\4\0\10\32\1\202"+
    "\20\32\26\0\3\32\6\0\3\32\4\0\17\32\1\203"+
    "\11\32\26\0\3\32\6\0\3\32\4\0\10\32\1\204"+
    "\10\32\1\205\7\32\26\0\3\32\6\0\3\32\4\0"+
    "\10\32\1\206\2\32\1\207\15\32\26\0\3\32\6\0"+
    "\3\32\4\0\10\32\1\210\20\32\15\0\1\145\10\0"+
    "\3\146\52\0\2\147\1\0\1\150\10\147\1\211\62\147"+
    "\1\0\1\147\117\0\3\32\6\0\3\32\4\0\16\32"+
    "\1\212\12\32\26\0\3\32\6\0\3\32\4\0\1\213"+
    "\30\32\26\0\3\32\6\0\3\32\4\0\4\32\1\214"+
    "\24\32\26\0\3\32\6\0\3\32\4\0\20\32\1\215"+
    "\10\32\26\0\3\32\6\0\3\32\4\0\21\32\1\216"+
    "\1\217\6\32\26\0\3\32\6\0\3\32\4\0\1\220"+
    "\30\32\26\0\3\32\6\0\3\32\4\0\1\32\1\221"+
    "\27\32\26\0\3\32\6\0\3\32\4\0\4\32\1\222"+
    "\24\32\26\0\3\32\6\0\3\32\4\0\14\32\1\223"+
    "\14\32\26\0\3\32\6\0\3\32\4\0\4\32\1\224"+
    "\24\32\26\0\3\32\6\0\3\32\4\0\1\225\30\32"+
    "\26\0\3\32\6\0\3\32\4\0\16\32\1\226\12\32"+
    "\26\0\3\32\6\0\3\32\4\0\6\32\1\227\22\32"+
    "\26\0\3\32\6\0\3\32\4\0\10\32\1\230\20\32"+
    "\26\0\3\32\6\0\3\32\4\0\23\32\1\231\5\32"+
    "\26\0\3\32\6\0\3\32\4\0\20\32\1\232\10\32"+
    "\26\0\3\32\6\0\3\32\4\0\15\32\1\233\13\32"+
    "\26\0\3\32\6\0\3\32\4\0\4\32\1\234\24\32"+
    "\26\0\3\32\6\0\3\32\4\0\22\32\1\235\6\32"+
    "\26\0\3\32\6\0\3\32\4\0\23\32\1\236\5\32"+
    "\26\0\3\32\6\0\3\32\4\0\22\32\1\237\6\32"+
    "\26\0\3\32\6\0\3\32\4\0\4\32\1\240\24\32"+
    "\26\0\3\32\6\0\3\32\4\0\16\32\1\241\12\32"+
    "\26\0\3\32\6\0\3\32\4\0\10\32\1\242\20\32"+
    "\26\0\3\32\6\0\3\32\4\0\3\32\1\243\25\32"+
    "\26\0\3\32\6\0\3\32\4\0\1\244\30\32\26\0"+
    "\3\32\6\0\3\32\4\0\13\32\1\245\15\32\4\0"+
    "\2\147\1\0\1\150\10\147\1\211\4\147\1\246\55\147"+
    "\22\0\3\32\6\0\3\32\4\0\12\32\1\247\16\32"+
    "\26\0\3\32\6\0\3\32\4\0\22\32\1\250\6\32"+
    "\26\0\3\32\6\0\3\32\4\0\10\32\1\251\20\32"+
    "\26\0\3\32\6\0\3\32\4\0\23\32\1\252\5\32"+
    "\26\0\3\32\6\0\3\32\4\0\13\32\1\253\15\32"+
    "\26\0\3\32\6\0\3\32\4\0\20\32\1\254\10\32"+
    "\26\0\3\32\6\0\3\32\4\0\22\32\1\255\6\32"+
    "\26\0\3\32\6\0\3\32\4\0\21\32\1\256\7\32"+
    "\26\0\3\32\6\0\3\32\4\0\20\32\1\257\10\32"+
    "\26\0\3\32\6\0\3\32\4\0\22\32\1\260\6\32"+
    "\26\0\3\32\6\0\3\32\4\0\4\32\1\261\24\32"+
    "\26\0\3\32\6\0\3\32\4\0\16\32\1\262\12\32"+
    "\26\0\3\32\6\0\3\32\4\0\10\32\1\263\20\32"+
    "\26\0\3\32\6\0\3\32\4\0\2\32\1\264\26\32"+
    "\26\0\3\32\6\0\3\32\4\0\2\32\1\265\26\32"+
    "\26\0\3\32\6\0\3\32\4\0\3\32\1\266\25\32"+
    "\26\0\3\32\6\0\3\32\4\0\15\32\1\267\13\32"+
    "\26\0\3\32\6\0\3\32\4\0\6\32\1\270\22\32"+
    "\26\0\3\32\6\0\3\32\4\0\22\32\1\271\6\32"+
    "\26\0\3\32\6\0\3\32\4\0\4\32\1\272\24\32"+
    "\26\0\3\32\6\0\3\32\4\0\15\32\1\273\13\32"+
    "\26\0\3\32\6\0\3\32\4\0\13\32\1\274\15\32"+
    "\26\0\3\32\6\0\3\32\4\0\4\32\1\275\24\32"+
    "\26\0\3\32\6\0\3\32\4\0\15\32\1\276\13\32"+
    "\26\0\3\32\6\0\3\32\4\0\22\32\1\277\6\32"+
    "\26\0\3\32\6\0\3\32\4\0\15\32\1\300\13\32"+
    "\26\0\3\32\6\0\3\32\4\0\3\32\1\301\25\32"+
    "\26\0\3\32\6\0\3\32\4\0\5\32\1\302\23\32"+
    "\26\0\3\32\6\0\3\32\4\0\2\32\1\303\26\32"+
    "\26\0\3\32\6\0\3\32\4\0\22\32\1\304\6\32"+
    "\26\0\3\32\6\0\3\32\4\0\7\32\1\305\21\32"+
    "\26\0\3\32\6\0\3\32\4\0\4\32\1\306\24\32"+
    "\26\0\3\32\6\0\3\32\4\0\15\32\1\307\13\32"+
    "\26\0\3\32\6\0\3\32\4\0\10\32\1\310\20\32"+
    "\26\0\3\32\6\0\3\32\4\0\23\32\1\311\5\32"+
    "\26\0\3\32\6\0\3\32\4\0\22\32\1\312\6\32"+
    "\26\0\3\32\6\0\3\32\4\0\4\32\1\313\24\32"+
    "\26\0\3\32\6\0\3\32\4\0\5\32\1\314\23\32"+
    "\26\0\3\32\6\0\3\32\4\0\4\32\1\315\24\32"+
    "\26\0\3\32\6\0\3\32\4\0\13\32\1\316\15\32"+
    "\26\0\3\32\6\0\3\32\4\0\4\32\1\317\24\32"+
    "\26\0\3\32\6\0\3\32\4\0\20\32\1\320\10\32"+
    "\26\0\3\32\6\0\3\32\4\0\3\32\1\321\25\32"+
    "\26\0\3\32\6\0\3\32\4\0\4\32\1\322\24\32"+
    "\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8946];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\0\5\1\2\11\2\1\1\11\1\1"+
    "\1\11\3\1\2\11\3\1\1\11\1\1\2\11\20\1"+
    "\1\11\1\1\3\11\1\0\1\11\1\0\2\11\2\0"+
    "\4\11\1\0\2\11\2\1\1\0\1\1\2\0\1\1"+
    "\3\11\32\1\2\11\3\0\40\1\1\0\111\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[210];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexScanner(java.io.Reader in) {
   /* Código que se ejecutará en el constructor de la clase */
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return null;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { Token t = new Token("ERROR", yytext(), yyline, yycolumn);
  return t;
            }
            // fall through
          case 80: break;
          case 2:
            { 
            }
            // fall through
          case 81: break;
          case 3:
            { Token t = new Token("OPERADOR NOT", yytext(), yyline);
  return t;
            }
            // fall through
          case 82: break;
          case 4:
            { Token t = new Token("OPERADOR MÓDULO", yytext(), yyline);
  return t;
            }
            // fall through
          case 83: break;
          case 5:
            { Token t = new Token("OPERADOR AMPERSON", yytext(), yyline);
  return t;
            }
            // fall through
          case 84: break;
          case 6:
            { Token t = new Token("OPERADOR PARENTESIS ABIERTO", yytext(), yyline);
  return t;
            }
            // fall through
          case 85: break;
          case 7:
            { Token t = new Token("OPERADOR PARTENTESIS CERRADO", yytext(), yyline);
  return t;
            }
            // fall through
          case 86: break;
          case 8:
            { Token t = new Token("OPERADOR MULTIPLICACION", yytext(), yyline);
  return t;
            }
            // fall through
          case 87: break;
          case 9:
            { Token t = new Token("OPERADOR SUMA", yytext(), yyline);
  return t;
            }
            // fall through
          case 88: break;
          case 10:
            { Token t = new Token("OPERADOR COMA", yytext(), yyline);
  return t;
            }
            // fall through
          case 89: break;
          case 11:
            { Token t = new Token("OPERADOR RESTA", yytext(), yyline);
  return t;
            }
            // fall through
          case 90: break;
          case 12:
            { Token t = new Token("OPERADOR PUNTO", yytext(), yyline);
  return t;
            }
            // fall through
          case 91: break;
          case 13:
            { Token t = new Token("DECIMAL", yytext(), yyline);
  return t;
            }
            // fall through
          case 92: break;
          case 14:
            { Token t = new Token("OPERADOR DOS PUNTOS", yytext(), yyline);
  return t;
            }
            // fall through
          case 93: break;
          case 15:
            { Token t = new Token("OPERADOR PUNTO Y COMA", yytext(), yyline);
  return t;
            }
            // fall through
          case 94: break;
          case 16:
            { Token t = new Token("OPERADOR MENOR", yytext(), yyline);
  return t;
            }
            // fall through
          case 95: break;
          case 17:
            { Token t = new Token("OPERADOR IGUAL", yytext(), yyline);
  return t;
            }
            // fall through
          case 96: break;
          case 18:
            { Token t = new Token("OPERADOR MAYOR", yytext(), yyline);
  return t;
            }
            // fall through
          case 97: break;
          case 19:
            { Token t = new Token("OPERADOR CONDICIONAL TERNARIO", yytext(), yyline);
  return t;
            }
            // fall through
          case 98: break;
          case 20:
            { Token t = new Token("IDENTIFICADOR", yytext(), yyline);
  return t;
            }
            // fall through
          case 99: break;
          case 21:
            { Token t = new Token("OPERADOR CORCHETE ABIERTO", yytext(), yyline);
  return t;
            }
            // fall through
          case 100: break;
          case 22:
            { Token t = new Token("OPERADOR CORCHETE CERRADO", yytext(), yyline);
  return t;
            }
            // fall through
          case 101: break;
          case 23:
            { Token t = new Token("OPERADOR XOR BINARIO", yytext(), yyline);
  return t;
            }
            // fall through
          case 102: break;
          case 24:
            { Token t = new Token("OPERADOR LLAVE ABIERTA", yytext(), yyline);
  return t;
            }
            // fall through
          case 103: break;
          case 25:
            { Token t = new Token("OPERADOR OR", yytext(), yyline);
  return t;
            }
            // fall through
          case 104: break;
          case 26:
            { Token t = new Token("OPERADOR LLAVE CERRADA", yytext(), yyline);
  return t;
            }
            // fall through
          case 105: break;
          case 27:
            { Token t = new Token("OPERADOR COMPLEMENTO A UNO", yytext(), yyline);
  return t;
            }
            // fall through
          case 106: break;
          case 28:
            { Token t = new Token("OPERADOR DIFERENTE", yytext(), yyline);
  return t;
            }
            // fall through
          case 107: break;
          case 29:
            { Token t = new Token("LITERAL STRING", yytext(), yyline);
  return t;
            }
            // fall through
          case 108: break;
          case 30:
            { Token t = new Token("OPERADOR ASIGNACIÓN", yytext(), yyline);
  return t;
            }
            // fall through
          case 109: break;
          case 31:
            { Token t = new Token("OPERADOR AND LÓGICO", yytext(), yyline);
  return t;
            }
            // fall through
          case 110: break;
          case 32:
            { Token t = new Token("OPERADOR POR IGUAL", yytext(), yyline);
  return t;
            }
            // fall through
          case 111: break;
          case 33:
            { Token t = new Token("OPERADOR SUMA 1", yytext(), yyline);
  return t;
            }
            // fall through
          case 112: break;
          case 34:
            { Token t = new Token("OPERADOR MAS IGUAL", yytext(), yyline);
  return t;
            }
            // fall through
          case 113: break;
          case 35:
            { Token t = new Token("OPERADOR RESTA 1", yytext(), yyline);
  return t;
            }
            // fall through
          case 114: break;
          case 36:
            { Token t = new Token("OPERADOR MENOS IGUAL", yytext(), yyline);
  return t;
            }
            // fall through
          case 115: break;
          case 37:
            { Token t = new Token("OPERADOR", yytext(), yyline);
  return t;
            }
            // fall through
          case 116: break;
          case 38:
            { Token t = new Token("OCTAL", yytext(), yyline);
  return t;
            }
            // fall through
          case 117: break;
          case 39:
            { Token t = new Token("OPERADOR DESPLAZAMIENTO A LA IZQUIERDA", yytext(), yyline);
  return t;
            }
            // fall through
          case 118: break;
          case 40:
            { Token t = new Token("OPERADOR MENOR O IGUAL", yytext(), yyline);
  return t;
            }
            // fall through
          case 119: break;
          case 41:
            { Token t = new Token("OPERADOR COMPARACION", yytext(), yyline);
  return t;
            }
            // fall through
          case 120: break;
          case 42:
            { Token t = new Token("OPERADOR MAYOR O IGUAL", yytext(), yyline);
  return t;
            }
            // fall through
          case 121: break;
          case 43:
            { Token t = new Token("OPERADOR DESPLAZAMIENTO A LA DERECHA", yytext(), yyline);
  return t;
            }
            // fall through
          case 122: break;
          case 44:
            { Token t = new Token("RESERVADA DO", yytext(), yyline);
  return t;
            }
            // fall through
          case 123: break;
          case 45:
            { Token t = new Token("RESERVADA IF", yytext(), yyline);
  return t;
            }
            // fall through
          case 124: break;
          case 46:
            { Token t = new Token("OPERADOR OR LÓGICO", yytext(), yyline);
  return t;
            }
            // fall through
          case 125: break;
          case 47:
            { Token t = new Token("LITERAL CHAR", yytext(), yyline);
  return t;
            }
            // fall through
          case 126: break;
          case 48:
            { Token t = new Token("DOUBLE", yytext(), yyline);
  return t;
            }
            // fall through
          case 127: break;
          case 49:
            { Token t = new Token("HEXADECIMAL", yytext(), yyline);
  return t;
            }
            // fall through
          case 128: break;
          case 50:
            { Token t = new Token("RESERVADA FOR", yytext(), yyline);
  return t;
            }
            // fall through
          case 129: break;
          case 51:
            { Token t = new Token("RESERVADA INT", yytext(), yyline);
  return t;
            }
            // fall through
          case 130: break;
          case 52:
            { Token t = new Token("RESERVADA AUTO", yytext(), yyline);
  return t;
            }
            // fall through
          case 131: break;
          case 53:
            { Token t = new Token("RESERVADA CASE", yytext(), yyline);
  return t;
            }
            // fall through
          case 132: break;
          case 54:
            { Token t = new Token("RESERVADA CHAR", yytext(), yyline);
  return t;
            }
            // fall through
          case 133: break;
          case 55:
            { Token t = new Token("RESERVADA ELSE", yytext(), yyline);
  return t;
            }
            // fall through
          case 134: break;
          case 56:
            { Token t = new Token("RESERVADA ENUM", yytext(), yyline);
  return t;
            }
            // fall through
          case 135: break;
          case 57:
            { Token t = new Token("RESERVADA GOTO", yytext(), yyline);
  return t;
            }
            // fall through
          case 136: break;
          case 58:
            { Token t = new Token("RESERVADA LONG", yytext(), yyline);
  return t;
            }
            // fall through
          case 137: break;
          case 59:
            { Token t = new Token("RESERVADA VOID", yytext(), yyline);
  return t;
            }
            // fall through
          case 138: break;
          case 60:
            { Token t = new Token("RESERVADA BREAK", yytext(), yyline);
  return t;
            }
            // fall through
          case 139: break;
          case 61:
            { Token t = new Token("RESERVADA CONST", yytext(), yyline);
  return t;
            }
            // fall through
          case 140: break;
          case 62:
            { Token t = new Token("RESERVADA FLOAT", yytext(), yyline);
  return t;
            }
            // fall through
          case 141: break;
          case 63:
            { Token t = new Token("RESERVADA SHORT", yytext(), yyline);
  return t;
            }
            // fall through
          case 142: break;
          case 64:
            { Token t = new Token("RESERVADA UNION", yytext(), yyline);
  return t;
            }
            // fall through
          case 143: break;
          case 65:
            { Token t = new Token("RESERVADA WHILE", yytext(), yyline);
  return t;
            }
            // fall through
          case 144: break;
          case 66:
            { Token t = new Token("RESERVADA DOUBLE", yytext(), yyline);
  return t;
            }
            // fall through
          case 145: break;
          case 67:
            { Token t = new Token("RESERVADA EXTERN", yytext(), yyline);
  return t;
            }
            // fall through
          case 146: break;
          case 68:
            { Token t = new Token("RESERVADA RETURN", yytext(), yyline);
  return t;
            }
            // fall through
          case 147: break;
          case 69:
            { Token t = new Token("RESERVADA SIGNED", yytext(), yyline);
  return t;
            }
            // fall through
          case 148: break;
          case 70:
            { Token t = new Token("RESERVADA SIZEOF", yytext(), yyline);
  return t;
            }
            // fall through
          case 149: break;
          case 71:
            { Token t = new Token("RESERVADA STATIC", yytext(), yyline);
  return t;
            }
            // fall through
          case 150: break;
          case 72:
            { Token t = new Token("RESERVADA STRUCT", yytext(), yyline);
  return t;
            }
            // fall through
          case 151: break;
          case 73:
            { Token t = new Token("RESERVADA SWITCH", yytext(), yyline);
  return t;
            }
            // fall through
          case 152: break;
          case 74:
            { Token t = new Token("RESERVADA DEFAULT", yytext(), yyline);
  return t;
            }
            // fall through
          case 153: break;
          case 75:
            { Token t = new Token("RESERVADA TYPEDEF", yytext(), yyline);
  return t;
            }
            // fall through
          case 154: break;
          case 76:
            { Token t = new Token("RESERVADA CONTINUE", yytext(), yyline);
  return t;
            }
            // fall through
          case 155: break;
          case 77:
            { Token t = new Token("RESERVADA REGISTER", yytext(), yyline);
  return t;
            }
            // fall through
          case 156: break;
          case 78:
            { Token t = new Token("RESERVADA UNSIGNED", yytext(), yyline);
  return t;
            }
            // fall through
          case 157: break;
          case 79:
            { Token t = new Token("RESERVADA VOLATILE", yytext(), yyline);
  return t;
            }
            // fall through
          case 158: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
