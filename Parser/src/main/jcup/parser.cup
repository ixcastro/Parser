/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
import java_cup.runtime.Symbol;

parser code {:
    private Symbol symbol;

    public void syntax_error(Symbol symbol){
        this.symbol = symbol:
    }

    public Symbol getSymbol(){
        return this.symbol;
    }

:}

/* Terminals (tokens returned by the scanner). */
terminal    AUTO, BREAK, CASE, CHAR, CONST, CONTINUE, DEFAULT, DO, DOUBLE, ELSE, ENUM, EXTERN,
            FLOAT, FOR, GOTO, IF, INT, LONG, REGISTER, RETURN, SHORT, SIGNED, SIZEOF, STATIC,
            STRUCT, SWITCH, TYPEDEF, UNION, UNSIGNED, VOID, VOLATILE, WHILE, INCREMENT, 
            DECREMENT, EQUAL_TO, GRATER_EQUAL, GRATER, TERNARY, LESS_EQUAL, LESS, NOT_EQUAL, OR, 
            AND, NOT, EQUAL, PLUS, MINUS, MULT, DIV, MODULE, RBO, RBC, SBO, SBC, CBO, CBC, COLON,
            DOT, PLUS_ASSIGNMENT, MINUS_ASSIGNMENT, MULT_ASSIGNMENT, DIV_ASSIGNMENT, BIT_AND, XOR,
            BIT_OR, RIGHT_SHIFT, LEFT_SHIFT, COMPLEMENT, MOD_ASSIGNMENT, AND_ASSIGNMENT, XOR_ASSIGNMENT, 
            OR_ASSIGNMENT, LEFT_SHIFT_ASSIGNMENT, RIGHT_SHIFT_ASSIGNMENT, OP, ERROR;

terminal Integer DEC_LIT, Integer OCTAL_LIT, Integer HEX_LIT, double DOUBLE_LIT, String STRING_LIT, char CHAR_LIT;   

/* Non terminals */
non terminal            program, expr_list;
non terminal Integer    expr;      // used to store evaluated subexpressions

/* Precedences */
precedence left 
precedence left PLUS, MINUS;
precedence left TIMES;
precedence left UMINUS;

/* The grammar rules */
start with program;


expr_list ::= expr_list expr:e SEMI         {: System.out.println(e);:}
            | expr:e SEMI                   {: System.out.println(e);:}
;
expr      ::= expr:e1 PLUS  expr:e2         {: RESULT = e1+e2;       :}
             | expr:e1 MINUS expr:e2        {: RESULT = e1-e2;       :}
             | expr:e1 TIMES expr:e2        {: RESULT = e1*e2;       :}
             | MINUS expr:e                 {: RESULT = -e;          :}
  	     %prec UMINUS
       | LPAREN expr:e RPAREN	         {: RESULT = e;           :}
       | NUMBER:n	                     {: RESULT = n;           :}
             ;