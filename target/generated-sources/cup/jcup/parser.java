
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package jcup;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import scanner.JFlexScanner;
import jcup.sym;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\216\000\002\002\004\000\002\002\005\000\002\002" +
    "\004\000\002\003\003\000\002\003\004\000\002\004\003" +
    "\000\002\004\003\000\002\005\004\000\002\006\004\000" +
    "\002\012\004\000\002\012\005\000\002\007\004\000\002" +
    "\007\005\000\002\010\003\000\002\010\004\000\002\011" +
    "\004\000\002\014\007\000\002\014\004\000\002\015\012" +
    "\000\002\015\012\000\002\047\002\000\002\015\013\000" +
    "\002\050\002\000\002\015\013\000\002\051\002\000\002" +
    "\015\013\000\002\052\002\000\002\015\013\000\002\016" +
    "\002\000\002\016\003\000\002\017\003\000\002\017\005" +
    "\000\002\017\004\000\002\021\004\000\002\021\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\004\000\002\022\004\000\002\022\003\000\002\023\012" +
    "\000\002\053\002\000\002\023\013\000\002\054\002\000" +
    "\002\023\013\000\002\055\002\000\002\023\013\000\002" +
    "\024\002\000\002\024\006\000\002\025\011\000\002\056" +
    "\002\000\002\025\012\000\002\057\002\000\002\025\012" +
    "\000\002\060\002\000\002\025\012\000\002\025\007\000" +
    "\002\026\011\000\002\061\002\000\002\026\012\000\002" +
    "\062\002\000\002\026\012\000\002\063\002\000\002\026" +
    "\013\000\002\026\007\000\002\027\007\000\002\064\002" +
    "\000\002\027\010\000\002\065\002\000\002\027\010\000" +
    "\002\066\002\000\002\027\010\000\002\027\007\000\002" +
    "\030\007\000\002\067\002\000\002\030\010\000\002\070" +
    "\002\000\002\030\010\000\002\071\002\000\002\030\010" +
    "\000\002\030\007\000\002\031\002\000\002\031\005\000" +
    "\002\032\012\000\002\032\005\000\002\032\007\000\002" +
    "\033\011\000\002\033\004\000\002\033\006\000\002\034" +
    "\004\000\002\034\003\000\002\037\006\000\002\037\004" +
    "\000\002\037\005\000\002\037\005\000\002\037\005\000" +
    "\002\037\005\000\002\037\005\000\002\037\005\000\002" +
    "\037\005\000\002\037\005\000\002\037\005\000\002\037" +
    "\005\000\002\037\005\000\002\037\004\000\002\037\003" +
    "\000\002\037\006\000\002\037\003\000\002\043\003\000" +
    "\002\043\003\000\002\043\003\000\002\045\003\000\002" +
    "\045\003\000\002\045\003\000\002\045\003\000\002\045" +
    "\003\000\002\046\002\000\002\046\004\000\002\046\004" +
    "\000\002\046\004\000\002\035\006\000\002\013\002\000" +
    "\002\013\003\000\002\020\003\000\002\020\005\000\002" +
    "\040\004\000\002\041\003\000\002\041\003\000\002\041" +
    "\003\000\002\041\003\000\002\042\003\000\002\042\003" +
    "\000\002\042\003\000\002\042\003\000\002\042\003\000" +
    "\002\042\003\000\002\044\003\000\002\044\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0138\000\016\007\021\010\023\024\006\025\007\030" +
    "\022\041\012\001\002\000\012\007\021\024\006\025\007" +
    "\030\022\001\002\000\016\007\ufffb\010\ufffb\024\ufffb\025" +
    "\ufffb\030\ufffb\041\ufffb\001\002\000\006\003\uff7f\044\uff7f" +
    "\001\002\000\006\003\uff7d\044\uff7d\001\002\000\016\007" +
    "\ufff4\024\ufff4\025\ufff4\030\ufff4\041\ufff4\125\ufff4\001\002" +
    "\000\004\046\u0139\001\002\000\006\003\u0123\044\u0124\001" +
    "\002\000\004\002\u0122\001\002\000\016\007\021\024\006" +
    "\025\007\030\022\041\012\125\u0121\001\002\000\006\003" +
    "\132\044\u0120\001\002\000\016\007\ufffc\010\ufffc\024\ufffc" +
    "\025\ufffc\030\ufffc\041\ufffc\001\002\000\016\007\ufffe\010" +
    "\ufffe\024\ufffe\025\ufffe\030\ufffe\041\ufffe\001\002\000\016" +
    "\007\021\010\023\024\006\025\007\030\022\041\012\001" +
    "\002\000\006\003\uff7e\044\uff7e\001\002\000\006\003\uff7c" +
    "\044\uff7c\001\002\000\014\003\026\007\021\024\006\025" +
    "\007\030\022\001\002\000\004\010\023\001\002\000\016" +
    "\007\ufff9\010\ufff9\024\ufff9\025\ufff9\030\ufff9\041\ufff9\001" +
    "\002\000\034\007\ufff0\010\ufff0\011\ufff0\021\ufff0\023\ufff0" +
    "\024\ufff0\025\ufff0\027\ufff0\030\ufff0\035\ufff0\043\ufff0\044" +
    "\ufff0\076\ufff0\001\002\000\004\063\032\001\002\000\004" +
    "\044\031\001\002\000\014\003\uff80\045\uff80\046\uff80\063" +
    "\uff80\072\uff80\001\002\000\030\044\044\062\045\065\033" +
    "\071\036\123\035\124\037\126\050\127\043\130\034\131" +
    "\041\132\040\001\002\000\030\044\044\062\045\065\033" +
    "\071\036\123\035\124\037\126\050\127\043\130\034\131" +
    "\041\132\040\001\002\000\042\003\uff79\045\uff79\046\uff79" +
    "\051\uff79\052\uff79\053\uff79\055\uff79\056\uff79\057\uff79\064" +
    "\uff79\065\uff79\066\uff79\067\uff79\070\uff79\072\uff79\077\uff79" +
    "\001\002\000\040\003\uff75\045\uff75\046\uff75\051\uff75\052" +
    "\uff75\053\uff75\055\uff75\056\uff75\057\uff75\064\uff75\065\uff75" +
    "\066\uff75\067\uff75\070\uff75\072\uff75\001\002\000\030\044" +
    "\044\062\045\065\033\071\036\123\035\124\037\126\050" +
    "\127\043\130\034\131\041\132\040\001\002\000\040\003" +
    "\uff74\045\uff74\046\uff74\051\uff74\052\uff74\053\uff74\055\uff74" +
    "\056\uff74\057\uff74\064\uff74\065\uff74\066\uff74\067\uff74\070" +
    "\uff74\072\uff74\001\002\000\042\003\uff77\045\uff77\046\uff77" +
    "\051\uff77\052\uff77\053\uff77\055\uff77\056\uff77\057\uff77\064" +
    "\uff77\065\uff77\066\uff77\067\uff77\070\uff77\072\uff77\077\uff77" +
    "\001\002\000\042\003\uff78\045\uff78\046\uff78\051\uff78\052" +
    "\uff78\053\uff78\055\uff78\056\uff78\057\uff78\064\uff78\065\uff78" +
    "\066\uff78\067\uff78\070\uff78\072\uff78\077\uff78\001\002\000" +
    "\032\046\107\051\053\052\064\053\055\055\057\056\062" +
    "\057\061\064\056\065\052\066\063\067\060\070\054\001" +
    "\002\000\042\003\uff7a\045\uff7a\046\uff7a\051\uff7a\052\uff7a" +
    "\053\uff7a\055\uff7a\056\uff7a\057\uff7a\064\uff7a\065\uff7a\066" +
    "\uff7a\067\uff7a\070\uff7a\072\uff7a\077\uff7a\001\002\000\042" +
    "\003\uff76\045\uff76\046\uff76\051\uff76\052\uff76\053\uff76\055" +
    "\uff76\056\uff76\057\uff76\064\uff76\065\uff76\066\uff76\067\uff76" +
    "\070\uff76\071\100\072\uff76\001\002\000\030\044\044\062" +
    "\045\065\033\071\036\123\035\124\037\126\050\127\043" +
    "\130\034\131\041\132\040\001\002\000\040\003\uff94\045" +
    "\uff94\046\uff94\051\uff94\052\uff94\053\uff94\055\uff94\056\uff94" +
    "\057\uff94\064\uff94\065\uff94\066\uff94\067\uff94\070\uff94\072" +
    "\uff94\001\002\000\040\003\uff92\045\uff92\046\uff92\051\uff92" +
    "\052\uff92\053\uff92\055\uff92\056\uff92\057\uff92\064\uff92\065" +
    "\uff92\066\uff92\067\uff92\070\uff92\072\uff92\001\002\000\042" +
    "\003\uff7b\045\uff7b\046\uff7b\051\uff7b\052\uff7b\053\uff7b\055" +
    "\uff7b\056\uff7b\057\uff7b\064\uff7b\065\uff7b\066\uff7b\067\uff7b" +
    "\070\uff7b\072\uff7b\077\uff7b\001\002\000\040\003\uff95\045" +
    "\uff95\046\uff95\051\uff95\052\uff95\053\uff95\055\uff95\056\uff95" +
    "\057\uff95\064\uff95\065\uff95\066\uff95\067\uff95\070\uff95\072" +
    "\uff95\001\002\000\030\044\044\062\045\065\033\071\036" +
    "\123\035\124\037\126\050\127\043\130\034\131\041\132" +
    "\040\001\002\000\030\044\044\062\045\065\033\071\036" +
    "\123\035\124\037\126\050\127\043\130\034\131\041\132" +
    "\040\001\002\000\030\044\044\062\045\065\033\071\036" +
    "\123\035\124\037\126\050\127\043\130\034\131\041\132" +
    "\040\001\002\000\030\044\044\062\045\065\033\071\036" +
    "\123\035\124\037\126\050\127\043\130\034\131\041\132" +
    "\040\001\002\000\030\044\044\062\045\065\033\071\036" +
    "\123\035\124\037\126\050\127\043\130\034\131\041\132" +
    "\040\001\002\000\030\044\044\062\045\065\033\071\036" +
    "\123\035\124\037\126\050\127\043\130\034\131\041\132" +
    "\040\001\002\000\030\044\044\062\045\065\033\071\036" +
    "\123\035\124\037\126\050\127\043\130\034\131\041\132" +
    "\040\001\002\000\030\044\044\062\045\065\033\071\036" +
    "\123\035\124\037\126\050\127\043\130\034\131\041\132" +
    "\040\001\002\000\030\044\044\062\045\065\033\071\036" +
    "\123\035\124\037\126\050\127\043\130\034\131\041\132" +
    "\040\001\002\000\030\044\044\062\045\065\033\071\036" +
    "\123\035\124\037\126\050\127\043\130\034\131\041\132" +
    "\040\001\002\000\030\044\044\062\045\065\033\071\036" +
    "\123\035\124\037\126\050\127\043\130\034\131\041\132" +
    "\040\001\002\000\030\003\uff9e\045\uff9e\046\uff9e\051\uff9e" +
    "\057\uff9e\064\056\065\052\066\063\067\060\070\054\072" +
    "\uff9e\001\002\000\040\003\uff98\045\uff98\046\uff98\051\uff98" +
    "\052\uff98\053\uff98\055\uff98\056\uff98\057\uff98\064\uff98\065" +
    "\uff98\066\uff98\067\uff98\070\uff98\072\uff98\001\002\000\030" +
    "\003\uff9b\045\uff9b\046\uff9b\051\uff9b\057\uff9b\064\056\065" +
    "\052\066\063\067\060\070\054\072\uff9b\001\002\000\034" +
    "\003\uff9f\045\uff9f\046\uff9f\052\064\053\055\055\057\056" +
    "\062\064\056\065\052\066\063\067\060\070\054\072\uff9f" +
    "\001\002\000\040\003\uff97\045\uff97\046\uff97\051\uff97\052" +
    "\uff97\053\uff97\055\uff97\056\uff97\057\uff97\064\uff97\065\uff97" +
    "\066\uff97\067\uff97\070\uff97\072\uff97\001\002\000\030\003" +
    "\uff9c\045\uff9c\046\uff9c\051\uff9c\057\uff9c\064\056\065\052" +
    "\066\063\067\060\070\054\072\uff9c\001\002\000\040\003" +
    "\uff9a\045\uff9a\046\uff9a\051\uff9a\052\uff9a\053\uff9a\055\uff9a" +
    "\056\uff9a\057\uff9a\064\uff9a\065\uff9a\066\063\067\060\070" +
    "\054\072\uff9a\001\002\000\030\003\uff9d\045\uff9d\046\uff9d" +
    "\051\uff9d\057\uff9d\064\056\065\052\066\063\067\060\070" +
    "\054\072\uff9d\001\002\000\040\003\uff96\045\uff96\046\uff96" +
    "\051\uff96\052\uff96\053\uff96\055\uff96\056\uff96\057\uff96\064" +
    "\uff96\065\uff96\066\uff96\067\uff96\070\uff96\072\uff96\001\002" +
    "\000\034\003\uffa0\045\uffa0\046\uffa0\052\064\053\055\055" +
    "\057\056\062\064\056\065\052\066\063\067\060\070\054" +
    "\072\uffa0\001\002\000\040\003\uff99\045\uff99\046\uff99\051" +
    "\uff99\052\uff99\053\uff99\055\uff99\056\uff99\057\uff99\064\uff99" +
    "\065\uff99\066\063\067\060\070\054\072\uff99\001\002\000" +
    "\032\044\044\062\045\065\033\071\036\072\uff84\123\035" +
    "\124\037\126\050\127\043\130\034\131\041\132\040\001" +
    "\002\000\006\045\105\072\uff83\001\002\000\034\045\uff82" +
    "\051\053\052\064\053\055\055\057\056\062\057\061\064" +
    "\056\065\052\066\063\067\060\070\054\072\uff82\001\002" +
    "\000\004\072\104\001\002\000\040\003\uff93\045\uff93\046" +
    "\uff93\051\uff93\052\uff93\053\uff93\055\uff93\056\uff93\057\uff93" +
    "\064\uff93\065\uff93\066\uff93\067\uff93\070\uff93\072\uff93\001" +
    "\002\000\030\044\044\062\045\065\033\071\036\123\035" +
    "\124\037\126\050\127\043\130\034\131\041\132\040\001" +
    "\002\000\034\045\uff81\051\053\052\064\053\055\055\057" +
    "\056\062\057\061\064\056\065\052\066\063\067\060\070" +
    "\054\072\uff81\001\002\000\034\007\ufff1\010\ufff1\011\ufff1" +
    "\021\ufff1\023\ufff1\024\ufff1\025\ufff1\027\ufff1\030\ufff1\035" +
    "\ufff1\043\ufff1\044\ufff1\076\ufff1\001\002\000\032\051\053" +
    "\052\064\053\055\055\057\056\062\057\061\064\056\065" +
    "\052\066\063\067\060\070\054\072\111\001\002\000\050" +
    "\003\uff89\045\uff89\046\uff89\047\115\050\113\051\uff89\052" +
    "\uff89\053\uff89\055\uff89\056\uff89\057\uff89\060\120\061\112" +
    "\064\uff89\065\uff89\066\uff89\067\uff89\070\uff89\072\uff89\001" +
    "\002\000\030\044\044\062\045\065\033\071\036\123\035" +
    "\124\037\126\050\127\043\130\034\131\041\132\040\001" +
    "\002\000\040\003\uff8f\045\uff8f\046\uff8f\051\uff8f\052\uff8f" +
    "\053\uff8f\055\uff8f\056\uff8f\057\uff8f\064\uff8f\065\uff8f\066" +
    "\uff8f\067\uff8f\070\uff8f\072\uff8f\001\002\000\030\044\044" +
    "\062\045\065\033\071\036\123\035\124\037\126\050\127" +
    "\043\130\034\131\041\132\040\001\002\000\040\003\uff90" +
    "\045\uff90\046\uff90\051\uff90\052\uff90\053\uff90\055\uff90\056" +
    "\uff90\057\uff90\064\uff90\065\uff90\066\uff90\067\uff90\070\uff90" +
    "\072\uff90\001\002\000\040\003\uff91\045\uff91\046\uff91\051" +
    "\uff91\052\uff91\053\uff91\055\uff91\056\uff91\057\uff91\064\uff91" +
    "\065\uff91\066\uff91\067\uff91\070\uff91\072\uff91\001\002\000" +
    "\040\003\uffa2\045\uffa2\046\uffa2\051\uffa2\052\uffa2\053\uffa2" +
    "\055\uffa2\056\uffa2\057\uffa2\064\uffa2\065\uffa2\066\uffa2\067" +
    "\uffa2\070\uffa2\072\uffa2\001\002\000\030\044\044\062\045" +
    "\065\033\071\036\123\035\124\037\126\050\127\043\130" +
    "\034\131\041\132\040\001\002\000\040\003\uff86\045\uff86" +
    "\046\uff86\051\053\052\064\053\055\055\057\056\062\057" +
    "\061\064\056\065\052\066\063\067\060\070\054\072\uff86" +
    "\001\002\000\040\003\uff88\045\uff88\046\uff88\051\053\052" +
    "\064\053\055\055\057\056\062\057\061\064\056\065\052" +
    "\066\063\067\060\070\054\072\uff88\001\002\000\040\003" +
    "\uff87\045\uff87\046\uff87\051\053\052\064\053\055\055\057" +
    "\056\062\057\061\064\056\065\052\066\063\067\060\070" +
    "\054\072\uff87\001\002\000\040\003\uffa1\045\uffa1\046\uffa1" +
    "\051\uffa1\052\uffa1\053\uffa1\055\uffa1\056\uffa1\057\uffa1\064" +
    "\uffa1\065\uffa1\066\063\067\060\070\054\072\uffa1\001\002" +
    "\000\016\007\021\024\006\025\007\030\022\041\012\125" +
    "\131\001\002\000\016\007\ufffd\010\ufffd\024\ufffd\025\ufffd" +
    "\030\ufffd\041\ufffd\001\002\000\006\003\132\044\133\001" +
    "\002\000\016\007\ufff3\024\ufff3\025\ufff3\030\ufff3\041\ufff3" +
    "\125\ufff3\001\002\000\004\002\000\001\002\000\004\071" +
    "\uffed\001\002\000\006\003\134\071\135\001\002\000\014" +
    "\007\uffeb\024\uffeb\025\uffeb\030\uffeb\072\uffeb\001\002\000" +
    "\014\007\021\024\006\025\007\030\022\072\uffe5\001\002" +
    "\000\010\003\uffe3\045\uffe3\072\uffe3\001\002\000\004\072" +
    "\144\001\002\000\010\003\142\045\141\072\uffe4\001\002" +
    "\000\012\007\021\024\006\025\007\030\022\001\002\000" +
    "\010\003\uffe1\045\uffe1\072\uffe1\001\002\000\010\003\uffe2" +
    "\045\uffe2\072\uffe2\001\002\000\004\075\145\001\002\000" +
    "\032\007\021\010\023\011\146\021\166\023\157\024\006" +
    "\025\007\027\154\030\022\035\156\043\152\044\155\001" +
    "\002\000\004\046\u0112\001\002\000\034\007\uffdf\010\uffdf" +
    "\011\uffdf\021\uffdf\023\uffdf\024\uffdf\025\uffdf\027\uffdf\030" +
    "\uffdf\035\uffdf\043\uffdf\044\uffdf\076\uffdf\001\002\000\034" +
    "\007\uffd6\010\uffd6\011\uffd6\021\uffd6\023\uffd6\024\uffd6\025" +
    "\uffd6\027\uffd6\030\uffd6\035\uffd6\043\uffd6\044\uffd6\076\uffd6" +
    "\001\002\000\034\007\uffde\010\uffde\011\uffde\021\uffde\023" +
    "\uffde\024\uffde\025\uffde\027\uffde\030\uffde\035\uffde\043\uffde" +
    "\044\uffde\076\uffde\001\002\000\006\003\371\071\372\001" +
    "\002\000\034\007\uffdb\010\uffdb\011\uffdb\021\uffdb\023\uffdb" +
    "\024\uffdb\025\uffdb\027\uffdb\030\uffdb\035\uffdb\043\uffdb\044" +
    "\uffdb\076\uffdb\001\002\000\032\044\044\046\uffa3\062\045" +
    "\065\033\071\036\123\035\124\037\126\050\127\043\130" +
    "\034\131\041\132\040\001\002\000\004\063\365\001\002" +
    "\000\006\003\316\071\317\001\002\000\006\003\256\071" +
    "\257\001\002\000\034\007\uffdd\010\uffdd\011\uffdd\021\uffdd" +
    "\023\uffdd\024\uffdd\025\uffdd\027\uffdd\030\uffdd\035\uffdd\043" +
    "\uffdd\044\uffdd\076\uffdd\001\002\000\034\007\uffda\010\uffda" +
    "\011\uffda\021\uffda\023\uffda\024\uffda\025\uffda\027\uffda\030" +
    "\uffda\035\uffda\043\uffda\044\uffda\076\uffda\001\002\000\034" +
    "\007\uffd9\010\uffd9\011\uffd9\021\uffd9\023\uffd9\024\uffd9\025" +
    "\uffd9\027\uffd9\030\uffd9\035\uffd9\043\uffd9\044\uffd9\076\uffd9" +
    "\001\002\000\034\007\uffdc\010\uffdc\011\uffdc\021\uffdc\023" +
    "\uffdc\024\uffdc\025\uffdc\027\uffdc\030\uffdc\035\uffdc\043\uffdc" +
    "\044\uffdc\076\uffdc\001\002\000\006\045\247\046\250\001" +
    "\002\000\034\007\021\010\023\011\146\021\166\023\157" +
    "\024\006\025\007\027\154\030\022\035\156\043\152\044" +
    "\155\076\246\001\002\000\006\003\171\071\172\001\002" +
    "\000\004\046\170\001\002\000\034\007\uffd7\010\uffd7\011" +
    "\uffd7\021\uffd7\023\uffd7\024\uffd7\025\uffd7\027\uffd7\030\uffd7" +
    "\035\uffd7\043\uffd7\044\uffd7\076\uffd7\001\002\000\030\044" +
    "\uffc3\062\uffc3\065\uffc3\071\uffc3\123\uffc3\124\uffc3\126\uffc3" +
    "\127\uffc3\130\uffc3\131\uffc3\132\uffc3\001\002\000\032\003" +
    "\175\044\044\062\045\065\033\071\036\123\035\124\037" +
    "\126\050\127\043\130\034\131\041\132\040\001\002\000" +
    "\006\003\226\072\225\001\002\000\034\003\204\046\205" +
    "\051\053\052\064\053\055\055\057\056\062\057\061\064" +
    "\056\065\052\066\063\067\060\070\054\001\002\000\004" +
    "\072\uffc1\001\002\000\004\072\177\001\002\000\004\075" +
    "\200\001\002\000\032\007\021\010\023\011\146\021\166" +
    "\023\157\024\006\025\007\027\154\030\022\035\156\043" +
    "\152\044\155\001\002\000\034\007\021\010\023\011\146" +
    "\021\166\023\157\024\006\025\007\027\154\030\022\035" +
    "\156\043\152\044\155\076\203\001\002\000\034\007\uffe0" +
    "\010\uffe0\011\uffe0\021\uffe0\023\uffe0\024\uffe0\025\uffe0\027" +
    "\uffe0\030\uffe0\035\uffe0\043\uffe0\044\uffe0\076\uffe0\001\002" +
    "\000\034\007\uffc0\010\uffc0\011\uffc0\021\uffc0\023\uffc0\024" +
    "\uffc0\025\uffc0\027\uffc0\030\uffc0\035\uffc0\043\uffc0\044\uffc0" +
    "\076\uffc0\001\002\000\030\044\uffbb\062\uffbb\065\uffbb\071" +
    "\uffbb\123\uffbb\124\uffbb\126\uffbb\127\uffbb\130\uffbb\131\uffbb" +
    "\132\uffbb\001\002\000\032\003\207\044\044\062\045\065" +
    "\033\071\036\123\035\124\037\126\050\127\043\130\034" +
    "\131\041\132\040\001\002\000\034\003\213\046\214\051" +
    "\053\052\064\053\055\055\057\056\062\057\061\064\056" +
    "\065\052\066\063\067\060\070\054\001\002\000\004\046" +
    "\uffb9\001\002\000\004\046\211\001\002\000\030\044\044" +
    "\062\045\065\033\071\036\123\035\124\037\126\050\127" +
    "\043\130\034\131\041\132\040\001\002\000\034\003\uffb8" +
    "\051\053\052\064\053\055\055\057\056\062\057\061\064" +
    "\056\065\052\066\063\067\060\070\054\072\uffb8\001\002" +
    "\000\030\044\uffb7\062\uffb7\065\uffb7\071\uffb7\123\uffb7\124" +
    "\uffb7\126\uffb7\127\uffb7\130\uffb7\131\uffb7\132\uffb7\001\002" +
    "\000\032\003\216\044\044\062\045\065\033\071\036\123" +
    "\035\124\037\126\050\127\043\130\034\131\041\132\040" +
    "\001\002\000\034\003\uffbc\051\053\052\064\053\055\055" +
    "\057\056\062\057\061\064\056\065\052\066\063\067\060" +
    "\070\054\072\uffbc\001\002\000\006\003\uffb5\072\uffb5\001" +
    "\002\000\030\044\044\062\045\065\033\071\036\123\035" +
    "\124\037\126\050\127\043\130\034\131\041\132\040\001" +
    "\002\000\034\003\uffb6\051\053\052\064\053\055\055\057" +
    "\056\062\057\061\064\056\065\052\066\063\067\060\070" +
    "\054\072\uffb6\001\002\000\030\044\044\062\045\065\033" +
    "\071\036\123\035\124\037\126\050\127\043\130\034\131" +
    "\041\132\040\001\002\000\032\046\223\051\053\052\064" +
    "\053\055\055\057\056\062\057\061\064\056\065\052\066" +
    "\063\067\060\070\054\001\002\000\030\044\044\062\045" +
    "\065\033\071\036\123\035\124\037\126\050\127\043\130" +
    "\034\131\041\132\040\001\002\000\034\003\uffba\051\053" +
    "\052\064\053\055\055\057\056\062\057\061\064\056\065" +
    "\052\066\063\067\060\070\054\072\uffba\001\002\000\006" +
    "\003\234\075\235\001\002\000\004\072\uffbf\001\002\000" +
    "\004\072\230\001\002\000\004\075\231\001\002\000\032" +
    "\007\021\010\023\011\146\021\166\023\157\024\006\025" +
    "\007\027\154\030\022\035\156\043\152\044\155\001\002" +
    "\000\034\007\021\010\023\011\146\021\166\023\157\024" +
    "\006\025\007\027\154\030\022\035\156\043\152\044\155" +
    "\076\233\001\002\000\034\007\uffbe\010\uffbe\011\uffbe\021" +
    "\uffbe\023\uffbe\024\uffbe\025\uffbe\027\uffbe\030\uffbe\035\uffbe" +
    "\043\uffbe\044\uffbe\076\uffbe\001\002\000\034\007\uffbd\010" +
    "\uffbd\011\uffbd\021\uffbd\023\uffbd\024\uffbd\025\uffbd\027\uffbd" +
    "\030\uffbd\035\uffbd\043\uffbd\044\uffbd\076\uffbd\001\002\000" +
    "\032\007\021\010\023\011\146\021\166\023\157\024\006" +
    "\025\007\027\154\030\022\035\156\043\152\044\155\001" +
    "\002\000\034\007\021\010\023\011\146\021\166\023\157" +
    "\024\006\025\007\027\154\030\022\035\156\043\152\044" +
    "\155\076\237\001\002\000\034\007\uffc4\010\uffc4\011\uffc4" +
    "\021\uffc4\023\uffc4\024\uffc4\025\uffc4\027\uffc4\030\uffc4\035" +
    "\uffc4\043\uffc4\044\uffc4\076\uffc4\001\002\000\030\044\044" +
    "\062\045\065\033\071\036\123\035\124\037\126\050\127" +
    "\043\130\034\131\041\132\040\001\002\000\004\072\242" +
    "\001\002\000\004\075\243\001\002\000\032\007\021\010" +
    "\023\011\146\021\166\023\157\024\006\025\007\027\154" +
    "\030\022\035\156\043\152\044\155\001\002\000\034\007" +
    "\021\010\023\011\146\021\166\023\157\024\006\025\007" +
    "\027\154\030\022\035\156\043\152\044\155\076\245\001" +
    "\002\000\034\007\uffc2\010\uffc2\011\uffc2\021\uffc2\023\uffc2" +
    "\024\uffc2\025\uffc2\027\uffc2\030\uffc2\035\uffc2\043\uffc2\044" +
    "\uffc2\076\uffc2\001\002\000\016\007\uffef\024\uffef\025\uffef" +
    "\030\uffef\041\uffef\125\uffef\001\002\000\004\044\255\001" +
    "\002\000\034\007\ufff8\010\ufff8\011\ufff8\021\ufff8\023\ufff8" +
    "\024\ufff8\025\ufff8\027\ufff8\030\ufff8\035\ufff8\043\ufff8\044" +
    "\ufff8\076\ufff8\001\002\000\006\045\252\046\253\001\002" +
    "\000\004\044\254\001\002\000\034\007\ufff7\010\ufff7\011" +
    "\ufff7\021\ufff7\023\ufff7\024\ufff7\025\ufff7\027\ufff7\030\ufff7" +
    "\035\ufff7\043\ufff7\044\ufff7\076\ufff7\001\002\000\006\045" +
    "\ufff5\046\ufff5\001\002\000\006\045\ufff6\046\ufff6\001\002" +
    "\000\030\044\uffd4\062\uffd4\065\uffd4\071\uffd4\123\uffd4\124" +
    "\uffd4\126\uffd4\127\uffd4\130\uffd4\131\uffd4\132\uffd4\001\002" +
    "\000\032\003\261\044\044\062\045\065\033\071\036\123" +
    "\035\124\037\126\050\127\043\130\034\131\041\132\040" +
    "\001\002\000\034\003\274\051\053\052\064\053\055\055" +
    "\057\056\062\057\061\064\056\065\052\066\063\067\060" +
    "\070\054\072\275\001\002\000\004\072\uffd2\001\002\000" +
    "\004\072\263\001\002\000\004\075\264\001\002\000\032" +
    "\007\021\010\023\011\146\021\166\023\157\024\006\025" +
    "\007\027\154\030\022\035\156\043\152\044\155\001\002" +
    "\000\034\007\021\010\023\011\146\021\166\023\157\024" +
    "\006\025\007\027\154\030\022\035\156\043\152\044\155" +
    "\076\266\001\002\000\036\007\uffce\010\uffce\011\uffce\015" +
    "\270\021\uffce\023\uffce\024\uffce\025\uffce\027\uffce\030\uffce" +
    "\035\uffce\043\uffce\044\uffce\076\uffce\001\002\000\034\007" +
    "\uffd1\010\uffd1\011\uffd1\021\uffd1\023\uffd1\024\uffd1\025\uffd1" +
    "\027\uffd1\030\uffd1\035\uffd1\043\uffd1\044\uffd1\076\uffd1\001" +
    "\002\000\004\075\271\001\002\000\032\007\021\010\023" +
    "\011\146\021\166\023\157\024\006\025\007\027\154\030" +
    "\022\035\156\043\152\044\155\001\002\000\034\007\021" +
    "\010\023\011\146\021\166\023\157\024\006\025\007\027" +
    "\154\030\022\035\156\043\152\044\155\076\273\001\002" +
    "\000\034\007\uffcd\010\uffcd\011\uffcd\021\uffcd\023\uffcd\024" +
    "\uffcd\025\uffcd\027\uffcd\030\uffcd\035\uffcd\043\uffcd\044\uffcd" +
    "\076\uffcd\001\002\000\004\075\uffd0\001\002\000\004\075" +
    "\276\001\002\000\032\007\021\010\023\011\146\021\166" +
    "\023\157\024\006\025\007\027\154\030\022\035\156\043" +
    "\152\044\155\001\002\000\034\007\021\010\023\011\146" +
    "\021\166\023\157\024\006\025\007\027\154\030\022\035" +
    "\156\043\152\044\155\076\300\001\002\000\036\007\uffce" +
    "\010\uffce\011\uffce\015\270\021\uffce\023\uffce\024\uffce\025" +
    "\uffce\027\uffce\030\uffce\035\uffce\043\uffce\044\uffce\076\uffce" +
    "\001\002\000\034\007\uffd5\010\uffd5\011\uffd5\021\uffd5\023" +
    "\uffd5\024\uffd5\025\uffd5\027\uffd5\030\uffd5\035\uffd5\043\uffd5" +
    "\044\uffd5\076\uffd5\001\002\000\004\075\303\001\002\000" +
    "\032\007\021\010\023\011\146\021\166\023\157\024\006" +
    "\025\007\027\154\030\022\035\156\043\152\044\155\001" +
    "\002\000\034\007\021\010\023\011\146\021\166\023\157" +
    "\024\006\025\007\027\154\030\022\035\156\043\152\044" +
    "\155\076\305\001\002\000\036\007\uffce\010\uffce\011\uffce" +
    "\015\270\021\uffce\023\uffce\024\uffce\025\uffce\027\uffce\030" +
    "\uffce\035\uffce\043\uffce\044\uffce\076\uffce\001\002\000\034" +
    "\007\uffcf\010\uffcf\011\uffcf\021\uffcf\023\uffcf\024\uffcf\025" +
    "\uffcf\027\uffcf\030\uffcf\035\uffcf\043\uffcf\044\uffcf\076\uffcf" +
    "\001\002\000\030\044\044\062\045\065\033\071\036\123" +
    "\035\124\037\126\050\127\043\130\034\131\041\132\040" +
    "\001\002\000\032\051\053\052\064\053\055\055\057\056" +
    "\062\057\061\064\056\065\052\066\063\067\060\070\054" +
    "\072\311\001\002\000\004\075\312\001\002\000\032\007" +
    "\021\010\023\011\146\021\166\023\157\024\006\025\007" +
    "\027\154\030\022\035\156\043\152\044\155\001\002\000" +
    "\034\007\021\010\023\011\146\021\166\023\157\024\006" +
    "\025\007\027\154\030\022\035\156\043\152\044\155\076" +
    "\314\001\002\000\036\007\uffce\010\uffce\011\uffce\015\270" +
    "\021\uffce\023\uffce\024\uffce\025\uffce\027\uffce\030\uffce\035" +
    "\uffce\043\uffce\044\uffce\076\uffce\001\002\000\034\007\uffd3" +
    "\010\uffd3\011\uffd3\021\uffd3\023\uffd3\024\uffd3\025\uffd3\027" +
    "\uffd3\030\uffd3\035\uffd3\043\uffd3\044\uffd3\076\uffd3\001\002" +
    "\000\030\044\uffb3\062\uffb3\065\uffb3\071\uffb3\123\uffb3\124" +
    "\uffb3\126\uffb3\127\uffb3\130\uffb3\131\uffb3\132\uffb3\001\002" +
    "\000\032\003\321\044\044\062\045\065\033\071\036\123" +
    "\035\124\037\126\050\127\043\130\034\131\041\132\040" +
    "\001\002\000\034\003\353\051\053\052\064\053\055\055" +
    "\057\056\062\057\061\064\056\065\052\066\063\067\060" +
    "\070\054\072\354\001\002\000\004\072\uffb1\001\002\000" +
    "\004\072\323\001\002\000\036\006\uffac\007\uffac\010\uffac" +
    "\011\uffac\021\uffac\023\uffac\024\uffac\025\uffac\027\uffac\030" +
    "\uffac\035\uffac\043\uffac\044\uffac\076\uffac\001\002\000\036" +
    "\006\326\007\uffb0\010\uffb0\011\uffb0\021\uffb0\023\uffb0\024" +
    "\uffb0\025\uffb0\027\uffb0\030\uffb0\035\uffb0\043\uffb0\044\uffb0" +
    "\076\uffb0\001\002\000\004\012\341\001\002\000\016\044" +
    "\327\126\050\127\043\130\034\131\041\132\040\001\002" +
    "\000\004\077\uff76\001\002\000\004\077\331\001\002\000" +
    "\010\005\333\012\uffa9\075\332\001\002\000\032\007\021" +
    "\010\023\011\146\021\166\023\157\024\006\025\007\027" +
    "\154\030\022\035\156\043\152\044\155\001\002\000\004" +
    "\046\334\001\002\000\004\012\uffa8\001\002\000\034\007" +
    "\021\010\023\011\146\021\166\023\157\024\006\025\007" +
    "\027\154\030\022\035\156\043\152\044\155\076\336\001" +
    "\002\000\004\005\337\001\002\000\004\046\340\001\002" +
    "\000\004\012\uffaa\001\002\000\004\077\343\001\002\000" +
    "\036\006\uffab\007\uffab\010\uffab\011\uffab\021\uffab\023\uffab" +
    "\024\uffab\025\uffab\027\uffab\030\uffab\035\uffab\043\uffab\044" +
    "\uffab\076\uffab\001\002\000\042\005\345\006\uffa6\007\uffa6" +
    "\010\uffa6\011\uffa6\021\uffa6\023\uffa6\024\uffa6\025\uffa6\027" +
    "\uffa6\030\uffa6\035\uffa6\043\uffa6\044\uffa6\075\344\076\uffa6" +
    "\001\002\000\032\007\021\010\023\011\146\021\166\023" +
    "\157\024\006\025\007\027\154\030\022\035\156\043\152" +
    "\044\155\001\002\000\004\046\346\001\002\000\036\006" +
    "\uffa5\007\uffa5\010\uffa5\011\uffa5\021\uffa5\023\uffa5\024\uffa5" +
    "\025\uffa5\027\uffa5\030\uffa5\035\uffa5\043\uffa5\044\uffa5\076" +
    "\uffa5\001\002\000\034\007\021\010\023\011\146\021\166" +
    "\023\157\024\006\025\007\027\154\030\022\035\156\043" +
    "\152\044\155\076\350\001\002\000\004\005\351\001\002" +
    "\000\004\046\352\001\002\000\036\006\uffa7\007\uffa7\010" +
    "\uffa7\011\uffa7\021\uffa7\023\uffa7\024\uffa7\025\uffa7\027\uffa7" +
    "\030\uffa7\035\uffa7\043\uffa7\044\uffa7\076\uffa7\001\002\000" +
    "\036\006\uffaf\007\uffaf\010\uffaf\011\uffaf\021\uffaf\023\uffaf" +
    "\024\uffaf\025\uffaf\027\uffaf\030\uffaf\035\uffaf\043\uffaf\044" +
    "\uffaf\076\uffaf\001\002\000\040\003\356\006\uffac\007\uffac" +
    "\010\uffac\011\uffac\021\uffac\023\uffac\024\uffac\025\uffac\027" +
    "\uffac\030\uffac\035\uffac\043\uffac\044\uffac\076\uffac\001\002" +
    "\000\036\006\326\007\uffb4\010\uffb4\011\uffb4\021\uffb4\023" +
    "\uffb4\024\uffb4\025\uffb4\027\uffb4\030\uffb4\035\uffb4\043\uffb4" +
    "\044\uffb4\076\uffb4\001\002\000\034\007\uffad\010\uffad\011" +
    "\uffad\021\uffad\023\uffad\024\uffad\025\uffad\027\uffad\030\uffad" +
    "\035\uffad\043\uffad\044\uffad\076\uffad\001\002\000\036\006" +
    "\uffac\007\uffac\010\uffac\011\uffac\021\uffac\023\uffac\024\uffac" +
    "\025\uffac\027\uffac\030\uffac\035\uffac\043\uffac\044\uffac\076" +
    "\uffac\001\002\000\036\006\326\007\uffae\010\uffae\011\uffae" +
    "\021\uffae\023\uffae\024\uffae\025\uffae\027\uffae\030\uffae\035" +
    "\uffae\043\uffae\044\uffae\076\uffae\001\002\000\030\044\044" +
    "\062\045\065\033\071\036\123\035\124\037\126\050\127" +
    "\043\130\034\131\041\132\040\001\002\000\032\051\053" +
    "\052\064\053\055\055\057\056\062\057\061\064\056\065" +
    "\052\066\063\067\060\070\054\072\363\001\002\000\036" +
    "\006\uffac\007\uffac\010\uffac\011\uffac\021\uffac\023\uffac\024" +
    "\uffac\025\uffac\027\uffac\030\uffac\035\uffac\043\uffac\044\uffac" +
    "\076\uffac\001\002\000\036\006\326\007\uffb2\010\uffb2\011" +
    "\uffb2\021\uffb2\023\uffb2\024\uffb2\025\uffb2\027\uffb2\030\uffb2" +
    "\035\uffb2\043\uffb2\044\uffb2\076\uffb2\001\002\000\030\044" +
    "\044\062\045\065\033\071\036\123\035\124\037\126\050" +
    "\127\043\130\034\131\041\132\040\001\002\000\032\046" +
    "\367\051\053\052\064\053\055\055\057\056\062\057\061" +
    "\064\056\065\052\066\063\067\060\070\054\001\002\000" +
    "\034\007\uff85\010\uff85\011\uff85\021\uff85\023\uff85\024\uff85" +
    "\025\uff85\027\uff85\030\uff85\035\uff85\043\uff85\044\uff85\076" +
    "\uff85\001\002\000\032\046\uffa4\051\053\052\064\053\055" +
    "\055\057\056\062\057\061\064\056\065\052\066\063\067" +
    "\060\070\054\001\002\000\030\044\uffcb\062\uffcb\065\uffcb" +
    "\071\uffcb\123\uffcb\124\uffcb\126\uffcb\127\uffcb\130\uffcb\131" +
    "\uffcb\132\uffcb\001\002\000\032\003\374\044\044\062\045" +
    "\065\033\071\036\123\035\124\037\126\050\127\043\130" +
    "\034\131\041\132\040\001\002\000\034\003\u0102\051\053" +
    "\052\064\053\055\055\057\056\062\057\061\064\056\065" +
    "\052\066\063\067\060\070\054\072\u0103\001\002\000\004" +
    "\072\uffc9\001\002\000\004\072\376\001\002\000\004\075" +
    "\377\001\002\000\032\007\021\010\023\011\146\021\166" +
    "\023\157\024\006\025\007\027\154\030\022\035\156\043" +
    "\152\044\155\001\002\000\034\007\021\010\023\011\146" +
    "\021\166\023\157\024\006\025\007\027\154\030\022\035" +
    "\156\043\152\044\155\076\u0101\001\002\000\034\007\uffc8" +
    "\010\uffc8\011\uffc8\021\uffc8\023\uffc8\024\uffc8\025\uffc8\027" +
    "\uffc8\030\uffc8\035\uffc8\043\uffc8\044\uffc8\076\uffc8\001\002" +
    "\000\004\075\uffc7\001\002\000\006\003\u0104\075\u0105\001" +
    "\002\000\034\007\uffc5\010\uffc5\011\uffc5\021\uffc5\023\uffc5" +
    "\024\uffc5\025\uffc5\027\uffc5\030\uffc5\035\uffc5\043\uffc5\044" +
    "\uffc5\076\uffc5\001\002\000\032\007\021\010\023\011\146" +
    "\021\166\023\157\024\006\025\007\027\154\030\022\035" +
    "\156\043\152\044\155\001\002\000\034\007\021\010\023" +
    "\011\146\021\166\023\157\024\006\025\007\027\154\030" +
    "\022\035\156\043\152\044\155\076\u0107\001\002\000\034" +
    "\007\uffcc\010\uffcc\011\uffcc\021\uffcc\023\uffcc\024\uffcc\025" +
    "\uffcc\027\uffcc\030\uffcc\035\uffcc\043\uffcc\044\uffcc\076\uffcc" +
    "\001\002\000\004\075\u0109\001\002\000\032\007\021\010" +
    "\023\011\146\021\166\023\157\024\006\025\007\027\154" +
    "\030\022\035\156\043\152\044\155\001\002\000\034\007" +
    "\021\010\023\011\146\021\166\023\157\024\006\025\007" +
    "\027\154\030\022\035\156\043\152\044\155\076\u010b\001" +
    "\002\000\034\007\uffc6\010\uffc6\011\uffc6\021\uffc6\023\uffc6" +
    "\024\uffc6\025\uffc6\027\uffc6\030\uffc6\035\uffc6\043\uffc6\044" +
    "\uffc6\076\uffc6\001\002\000\030\044\044\062\045\065\033" +
    "\071\036\123\035\124\037\126\050\127\043\130\034\131" +
    "\041\132\040\001\002\000\032\051\053\052\064\053\055" +
    "\055\057\056\062\057\061\064\056\065\052\066\063\067" +
    "\060\070\054\072\u010e\001\002\000\004\075\u010f\001\002" +
    "\000\032\007\021\010\023\011\146\021\166\023\157\024" +
    "\006\025\007\027\154\030\022\035\156\043\152\044\155" +
    "\001\002\000\034\007\021\010\023\011\146\021\166\023" +
    "\157\024\006\025\007\027\154\030\022\035\156\043\152" +
    "\044\155\076\u0111\001\002\000\034\007\uffca\010\uffca\011" +
    "\uffca\021\uffca\023\uffca\024\uffca\025\uffca\027\uffca\030\uffca" +
    "\035\uffca\043\uffca\044\uffca\076\uffca\001\002\000\034\007" +
    "\uffd8\010\uffd8\011\uffd8\021\uffd8\023\uffd8\024\uffd8\025\uffd8" +
    "\027\uffd8\030\uffd8\035\uffd8\043\uffd8\044\uffd8\076\uffd8\001" +
    "\002\000\014\007\021\024\006\025\007\030\022\072\uffe5" +
    "\001\002\000\004\072\u0115\001\002\000\004\075\u0116\001" +
    "\002\000\032\007\021\010\023\011\146\021\166\023\157" +
    "\024\006\025\007\027\154\030\022\035\156\043\152\044" +
    "\155\001\002\000\034\007\021\010\023\011\146\021\166" +
    "\023\157\024\006\025\007\027\154\030\022\035\156\043" +
    "\152\044\155\076\u0118\001\002\000\016\007\uffea\024\uffea" +
    "\025\uffea\030\uffea\041\uffea\125\uffea\001\002\000\004\071" +
    "\u011a\001\002\000\014\007\021\024\006\025\007\030\022" +
    "\072\uffe5\001\002\000\004\072\u011c\001\002\000\004\075" +
    "\u011d\001\002\000\032\007\021\010\023\011\146\021\166" +
    "\023\157\024\006\025\007\027\154\030\022\035\156\043" +
    "\152\044\155\001\002\000\034\007\021\010\023\011\146" +
    "\021\166\023\157\024\006\025\007\027\154\030\022\035" +
    "\156\043\152\044\155\076\u011f\001\002\000\016\007\uffec" +
    "\024\uffec\025\uffec\030\uffec\041\uffec\125\uffec\001\002\000" +
    "\010\003\134\046\uff80\071\135\001\002\000\004\002\uffff" +
    "\001\002\000\004\002\001\001\002\000\004\071\uffe9\001" +
    "\002\000\006\003\u0125\071\u0126\001\002\000\014\007\uffe7" +
    "\024\uffe7\025\uffe7\030\uffe7\072\uffe7\001\002\000\014\007" +
    "\021\024\006\025\007\030\022\072\uffe5\001\002\000\004" +
    "\072\u0128\001\002\000\004\075\u0129\001\002\000\032\007" +
    "\021\010\023\011\146\021\166\023\157\024\006\025\007" +
    "\027\154\030\022\035\156\043\152\044\155\001\002\000" +
    "\034\007\021\010\023\011\146\021\166\023\157\024\006" +
    "\025\007\027\154\030\022\035\156\043\152\044\155\076" +
    "\u012b\001\002\000\016\007\uffee\024\uffee\025\uffee\030\uffee" +
    "\041\uffee\125\uffee\001\002\000\014\007\021\024\006\025" +
    "\007\030\022\072\uffe5\001\002\000\004\072\u012e\001\002" +
    "\000\004\075\u012f\001\002\000\032\007\021\010\023\011" +
    "\146\021\166\023\157\024\006\025\007\027\154\030\022" +
    "\035\156\043\152\044\155\001\002\000\034\007\021\010" +
    "\023\011\146\021\166\023\157\024\006\025\007\027\154" +
    "\030\022\035\156\043\152\044\155\076\u0131\001\002\000" +
    "\016\007\uffe6\024\uffe6\025\uffe6\030\uffe6\041\uffe6\125\uffe6" +
    "\001\002\000\004\071\u0133\001\002\000\014\007\021\024" +
    "\006\025\007\030\022\072\uffe5\001\002\000\004\072\u0135" +
    "\001\002\000\004\075\u0136\001\002\000\032\007\021\010" +
    "\023\011\146\021\166\023\157\024\006\025\007\027\154" +
    "\030\022\035\156\043\152\044\155\001\002\000\034\007" +
    "\021\010\023\011\146\021\166\023\157\024\006\025\007" +
    "\027\154\030\022\035\156\043\152\044\155\076\u0138\001" +
    "\002\000\016\007\uffe8\024\uffe8\025\uffe8\030\uffe8\041\uffe8" +
    "\125\uffe8\001\002\000\012\007\ufff2\024\ufff2\025\ufff2\030" +
    "\ufff2\001\002\000\016\007\ufffa\010\ufffa\024\ufffa\025\ufffa" +
    "\030\ufffa\041\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0138\000\030\002\012\003\017\004\016\005\004\006" +
    "\015\010\013\011\003\014\023\015\007\040\010\041\014" +
    "\001\001\000\012\005\u0139\011\003\040\010\041\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\015\127\041\126\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\004" +
    "\125\005\004\006\015\010\124\011\003\014\023\015\007" +
    "\040\010\041\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\040\026\041\027\001\001\000\006\006\024" +
    "\014\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\037\041\042\045\044\046\001\001\000\010\037\123\042" +
    "\045\044\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\037\107\042\045\044\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\037\050\042" +
    "\045\044\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\037\076\042" +
    "\045\044\046\001\001\000\010\037\075\042\045\044\046" +
    "\001\001\000\010\037\074\042\045\044\046\001\001\000" +
    "\010\037\073\042\045\044\046\001\001\000\010\037\072" +
    "\042\045\044\046\001\001\000\010\037\071\042\045\044" +
    "\046\001\001\000\010\037\070\042\045\044\046\001\001" +
    "\000\010\037\067\042\045\044\046\001\001\000\010\037" +
    "\066\042\045\044\046\001\001\000\010\037\065\042\045" +
    "\044\046\001\001\000\010\037\064\042\045\044\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\013\102\020\100\037" +
    "\101\042\045\044\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\037" +
    "\105\042\045\044\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\036\113\043\116\046" +
    "\115\001\001\000\010\037\122\042\045\044\046\001\001" +
    "\000\002\001\001\000\010\037\121\042\045\044\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\037\120\042\045\044\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\127\041\126\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\047\u0118\001\001\000\002\001\001\000\004\050\u0112\001" +
    "\001\000\012\016\136\017\137\040\135\041\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\040\142\041\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\012\162\014\157\021" +
    "\164\022\146\023\150\025\152\026\160\030\161\034\166" +
    "\035\147\040\163\041\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\037\367\042\045\044" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\250\001\001\000\030" +
    "\012\162\014\157\022\201\023\150\025\152\026\160\030" +
    "\161\034\166\035\147\040\163\041\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\061" +
    "\237\001\001\000\012\027\172\037\173\042\045\044\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\062" +
    "\175\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\012\162\014\157\021\200\022\146\023\150\025\152\026" +
    "\160\030\161\034\166\035\147\040\163\041\027\001\001" +
    "\000\030\012\162\014\157\022\201\023\150\025\152\026" +
    "\160\030\161\034\166\035\147\040\163\041\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\064\220\001" +
    "\001\000\010\037\205\042\045\044\046\001\001\000\002" +
    "\001\001\000\004\065\207\001\001\000\002\001\001\000" +
    "\010\037\211\042\045\044\046\001\001\000\002\001\001" +
    "\000\004\066\216\001\001\000\010\037\214\042\045\044" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\037\217\042\045\044\046\001\001\000\002\001\001\000" +
    "\010\037\221\042\045\044\046\001\001\000\002\001\001" +
    "\000\010\037\223\042\045\044\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\063\226\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\012\162\014\157\021" +
    "\231\022\146\023\150\025\152\026\160\030\161\034\166" +
    "\035\147\040\163\041\027\001\001\000\030\012\162\014" +
    "\157\022\201\023\150\025\152\026\160\030\161\034\166" +
    "\035\147\040\163\041\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\012\162\014\157\021\235\022\146" +
    "\023\150\025\152\026\160\030\161\034\166\035\147\040" +
    "\163\041\027\001\001\000\030\012\162\014\157\022\201" +
    "\023\150\025\152\026\160\030\161\034\166\035\147\040" +
    "\163\041\027\001\001\000\002\001\001\000\012\027\240" +
    "\037\173\042\045\044\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\012\162\014\157\021\243\022\146" +
    "\023\150\025\152\026\160\030\161\034\166\035\147\040" +
    "\163\041\027\001\001\000\030\012\162\014\157\022\201" +
    "\023\150\025\152\026\160\030\161\034\166\035\147\040" +
    "\163\041\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\053\306\001\001\000\010\037\257\042" +
    "\045\044\046\001\001\000\002\001\001\000\004\054\261" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\012" +
    "\162\014\157\021\264\022\146\023\150\025\152\026\160" +
    "\030\161\034\166\035\147\040\163\041\027\001\001\000" +
    "\030\012\162\014\157\022\201\023\150\025\152\026\160" +
    "\030\161\034\166\035\147\040\163\041\027\001\001\000" +
    "\004\024\266\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\012\162\014\157\021\271\022\146\023\150\025" +
    "\152\026\160\030\161\034\166\035\147\040\163\041\027" +
    "\001\001\000\030\012\162\014\157\022\201\023\150\025" +
    "\152\026\160\030\161\034\166\035\147\040\163\041\027" +
    "\001\001\000\002\001\001\000\004\055\301\001\001\000" +
    "\002\001\001\000\032\012\162\014\157\021\276\022\146" +
    "\023\150\025\152\026\160\030\161\034\166\035\147\040" +
    "\163\041\027\001\001\000\030\012\162\014\157\022\201" +
    "\023\150\025\152\026\160\030\161\034\166\035\147\040" +
    "\163\041\027\001\001\000\004\024\300\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\012\162\014\157\021" +
    "\303\022\146\023\150\025\152\026\160\030\161\034\166" +
    "\035\147\040\163\041\027\001\001\000\030\012\162\014" +
    "\157\022\201\023\150\025\152\026\160\030\161\034\166" +
    "\035\147\040\163\041\027\001\001\000\004\024\305\001" +
    "\001\000\002\001\001\000\010\037\307\042\045\044\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\012" +
    "\162\014\157\021\312\022\146\023\150\025\152\026\160" +
    "\030\161\034\166\035\147\040\163\041\027\001\001\000" +
    "\030\012\162\014\157\022\201\023\150\025\152\026\160" +
    "\030\161\034\166\035\147\040\163\041\027\001\001\000" +
    "\004\024\314\001\001\000\002\001\001\000\004\067\360" +
    "\001\001\000\010\037\317\042\045\044\046\001\001\000" +
    "\002\001\001\000\004\070\321\001\001\000\002\001\001" +
    "\000\004\031\323\001\001\000\004\032\324\001\001\000" +
    "\004\033\341\001\001\000\004\042\327\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\012" +
    "\162\014\157\021\334\022\146\023\150\025\152\026\160" +
    "\030\161\034\166\035\147\040\163\041\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\012\162\014\157" +
    "\022\201\023\150\025\152\026\160\030\161\034\166\035" +
    "\147\040\163\041\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\012\162\014\157\021\346" +
    "\022\146\023\150\025\152\026\160\030\161\034\166\035" +
    "\147\040\163\041\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\012\162\014\157\022\201\023\150\025" +
    "\152\026\160\030\161\034\166\035\147\040\163\041\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\071\356\001\001\000\004\031\354\001\001" +
    "\000\004\032\324\001\001\000\002\001\001\000\004\031" +
    "\357\001\001\000\004\032\324\001\001\000\010\037\361" +
    "\042\045\044\046\001\001\000\002\001\001\000\004\031" +
    "\363\001\001\000\004\032\324\001\001\000\010\037\365" +
    "\042\045\044\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\056\u010b\001\001\000\010" +
    "\037\372\042\045\044\046\001\001\000\002\001\001\000" +
    "\004\057\374\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\012\162\014\157\021\377\022\146\023\150\025" +
    "\152\026\160\030\161\034\166\035\147\040\163\041\027" +
    "\001\001\000\030\012\162\014\157\022\201\023\150\025" +
    "\152\026\160\030\161\034\166\035\147\040\163\041\027" +
    "\001\001\000\002\001\001\000\004\060\u0107\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\012\162\014\157" +
    "\021\u0105\022\146\023\150\025\152\026\160\030\161\034" +
    "\166\035\147\040\163\041\027\001\001\000\030\012\162" +
    "\014\157\022\201\023\150\025\152\026\160\030\161\034" +
    "\166\035\147\040\163\041\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\012\162\014\157\021\u0109\022" +
    "\146\023\150\025\152\026\160\030\161\034\166\035\147" +
    "\040\163\041\027\001\001\000\030\012\162\014\157\022" +
    "\201\023\150\025\152\026\160\030\161\034\166\035\147" +
    "\040\163\041\027\001\001\000\002\001\001\000\010\037" +
    "\u010c\042\045\044\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\012\162\014\157\021\u010f\022\146\023" +
    "\150\025\152\026\160\030\161\034\166\035\147\040\163" +
    "\041\027\001\001\000\030\012\162\014\157\022\201\023" +
    "\150\025\152\026\160\030\161\034\166\035\147\040\163" +
    "\041\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\016\u0113\017\137\040\135\041\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\012\162\014\157\021" +
    "\u0116\022\146\023\150\025\152\026\160\030\161\034\166" +
    "\035\147\040\163\041\027\001\001\000\030\012\162\014" +
    "\157\022\201\023\150\025\152\026\160\030\161\034\166" +
    "\035\147\040\163\041\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\016\u011a\017\137\040\135\041\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\012" +
    "\162\014\157\021\u011d\022\146\023\150\025\152\026\160" +
    "\030\161\034\166\035\147\040\163\041\027\001\001\000" +
    "\030\012\162\014\157\022\201\023\150\025\152\026\160" +
    "\030\161\034\166\035\147\040\163\041\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\051\u0131\001\001\000\002\001\001\000" +
    "\004\052\u012b\001\001\000\012\016\u0126\017\137\040\135" +
    "\041\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\012\162\014\157\021\u0129\022\146\023\150\025\152" +
    "\026\160\030\161\034\166\035\147\040\163\041\027\001" +
    "\001\000\030\012\162\014\157\022\201\023\150\025\152" +
    "\026\160\030\161\034\166\035\147\040\163\041\027\001" +
    "\001\000\002\001\001\000\012\016\u012c\017\137\040\135" +
    "\041\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\012\162\014\157\021\u012f\022\146\023\150\025\152" +
    "\026\160\030\161\034\166\035\147\040\163\041\027\001" +
    "\001\000\030\012\162\014\157\022\201\023\150\025\152" +
    "\026\160\030\161\034\166\035\147\040\163\041\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\016\u0133" +
    "\017\137\040\135\041\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\012\162\014\157\021\u0136\022\146" +
    "\023\150\025\152\026\160\030\161\034\166\035\147\040" +
    "\163\041\027\001\001\000\030\012\162\014\157\022\201" +
    "\023\150\025\152\026\160\030\161\034\166\035\147\040" +
    "\163\041\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    JFlexScanner lexer;
    private Symbol tokenError;
    private ArrayList<String> errors = new ArrayList<String>();

    public void syntax_error(Symbol s){
        try {
            String lexeme = s.value.toString();
            int row = s.left + 1;
            int column = s.right;
            tokenError = s;
        } catch(Exception e) {}
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        try {
            String lexeme = s.value.toString();
            int row = s.left + 1;
            int column = s.right;
            String str = "error:e sintáctico irrecuperable, con el símbolo: " + lexeme;
            this.errors.add(str);
        } catch (Exception e) {}
    }

    public void report_error(String message, Object info) {
        if (info instanceof String){
            System.out.println(message);
        } else {
            if (info instanceof Symbol) {
                String str = "error:e sintático en: " + message;
                Symbol symbol = (Symbol)info;
                str += ", con el símbolo: \"" + symbol.value.toString() + "\"";
                this.errors.add(str);
            } else {
                System.err.println(message);
            }
        }
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Symbol start_val = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= decls function_decls END_OF_FILE 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= function_decls END_OF_FILE 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // decls ::= decl 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decls",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decls ::= decls decl 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decls",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decl ::= constant_decls 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decl ::= global_decls 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // global_decls ::= global_decl global_decls 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_decls",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // constant_decls ::= constant_decl constant_decls 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant_decls",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // variable_decl ::= variable SEMICOLON 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_decl",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // variable_decl ::= variable variable_list SEMICOLON 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_decl",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // variable_list ::= COMMA IDENTIFIER 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_list",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // variable_list ::= variable_list COMMA IDENTIFIER 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_list",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // function_decls ::= function_decl 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_decls",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // function_decls ::= function_decls function_decl 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_decls",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // global_decl ::= variable SEMICOLON 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_decl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // constant_decl ::= CONST variable EQUAL expression SEMICOLON 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant_decl",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // constant_decl ::= CONST error 
            {
              Symbol RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                report_error("CONST sin declaración variable", e);
                RESULT = new Symbol(-1);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant_decl",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // function_decl ::= type IDENTIFIER RBO opt_parameters RBC CBO statements CBC 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_decl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // function_decl ::= VOID IDENTIFIER RBO opt_parameters RBC CBO statements CBC 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_decl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$0 ::= 
            {
              Symbol RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                report_error("Sin identificador de función", e);
                RESULT = new Symbol(-1);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // function_decl ::= type error NT$0 RBO opt_parameters RBC CBO statements CBC 
            {
              Symbol RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Symbol) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_decl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$1 ::= 
            {
              Symbol RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                report_error("Sin RBO (paréntesis abierto) ", e);
                RESULT = new Symbol(-1);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // function_decl ::= type IDENTIFIER error NT$1 opt_parameters RBC CBO statements CBC 
            {
              Symbol RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Symbol) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_decl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$2 ::= 
            {
              Symbol RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                report_error("Sin identificador de función", e);
                RESULT = new Symbol(-1);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // function_decl ::= VOID error NT$2 RBO opt_parameters RBC CBO statements CBC 
            {
              Symbol RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Symbol) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_decl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$3 ::= 
            {
              Symbol RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                report_error("Sin RBO (paréntesis abierto) ", e);
                RESULT = new Symbol(-1);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // function_decl ::= VOID IDENTIFIER error NT$3 opt_parameters RBC CBO statements CBC 
            {
              Symbol RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Symbol) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_decl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // opt_parameters ::= 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt_parameters",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // opt_parameters ::= parameters 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt_parameters",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parameters ::= variable 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parameters ::= parameters COMMA variable 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // parameters ::= parameters error 
            {
              Symbol RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                report_error("Parámetros sin coma entre ellos", e);
                RESULT = new Symbol(-1);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statements ::= statements statement 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statements ::= statement 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement ::= if_statement 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement ::= constant_decl 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement ::= variable_decl 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement ::= while_statement 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statement ::= for_statement 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statement ::= switch_statement 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statement ::= CONTINUE SEMICOLON 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement ::= return_statement SEMICOLON 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statement ::= assignment_expression 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // if_statement ::= IF RBO expression RBC CBO statements CBC opt_else 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$4 ::= 
            {
              Symbol RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                report_error("No tiene paréntesis abierto", e);
                RESULT = new Symbol(-1);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // if_statement ::= IF error NT$4 expression RBC CBO statements CBC opt_else 
            {
              Symbol RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Symbol) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$5 ::= 
            {
              Symbol RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                report_error("IF sin expresión", e);
                RESULT = new Symbol(-1);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // if_statement ::= IF RBO error NT$5 RBC CBO statements CBC opt_else 
            {
              Symbol RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Symbol) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$6 ::= 
            {
              Symbol RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                report_error("No tiene paréntesis cerrado", e);
                RESULT = new Symbol(-1);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // if_statement ::= IF RBO expression error NT$6 CBO statements CBC opt_else 
            {
              Symbol RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Symbol) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // opt_else ::= 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt_else",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // opt_else ::= ELSE CBO statements CBC 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt_else",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // while_statement ::= WHILE RBO expression RBC CBO statements CBC 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$7 ::= 
            {
              Symbol RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                report_error("No hay paréntesis al inicio de la expresión", e);
                RESULT = new Symbol(-1);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // while_statement ::= WHILE error NT$7 expression RBC CBO statements CBC 
            {
              Symbol RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Symbol) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$8 ::= 
            {
              Symbol RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                report_error("No hay expresión para el while", e);
                RESULT = new Symbol(-1);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // while_statement ::= WHILE RBO error NT$8 RBC CBO statements CBC 
            {
              Symbol RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Symbol) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$9 ::= 
            {
              Symbol RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                report_error("No hay paréntesis al final de la expresión", e);
                RESULT = new Symbol(-1);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // while_statement ::= WHILE RBO expression error NT$9 CBO statements CBC 
            {
              Symbol RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Symbol) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // while_statement ::= WHILE RBO expression RBC error 
            {
              Symbol RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                report_error("No hay bloque de declaraciones", e);
                RESULT = new Symbol(-1);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // for_statement ::= FOR RBO for_expression RBC CBO statements CBC 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$10 ::= 
            {
              Symbol RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                report_error("No hay paréntesis abierto en la expresión", e);
                RESULT = new Symbol(-1);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // for_statement ::= FOR error NT$10 for_expression RBC CBO statements CBC 
            {
              Symbol RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Symbol) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$11 ::= 
            {
              Symbol RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                report_error("No hay expresión en el FOR", e);
                RESULT = new Symbol(-1);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // for_statement ::= FOR RBO error NT$11 RBC CBO statements CBC 
            {
              Symbol RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Symbol) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$12 ::= 
            {
              Symbol RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                report_error("No hay paréntesis cerrado en la expresión", e);
                RESULT = new Symbol(-1);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // for_statement ::= FOR RBO for_expression error NT$12 RBC CBO statements CBC 
            {
              Symbol RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Symbol) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // for_statement ::= FOR RBO for_expression RBC error 
            {
              Symbol RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                report_error("No hay bloque de declaraciones", e);
                RESULT = new Symbol(-1);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // for_expression ::= expression SEMICOLON expression SEMICOLON expression 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_expression",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$13 ::= 
            {
              Symbol RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                report_error("No tiene COMA entre la primera y segunda expresión del FOR", e);
                RESULT = new Symbol(-1);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // for_expression ::= expression error NT$13 expression SEMICOLON expression 
            {
              Symbol RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Symbol) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_expression",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$14 ::= 
            {
              Symbol RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                report_error("No tiene la segunda expresión del FOR ", e);
                RESULT = new Symbol(-1);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // for_expression ::= expression SEMICOLON error NT$14 SEMICOLON expression 
            {
              Symbol RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Symbol) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_expression",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$15 ::= 
            {
              Symbol RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                report_error("No tiene COMA entre la segunda y tercera expresión del FOR", e);
                RESULT = new Symbol(-1);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // for_expression ::= expression SEMICOLON expression error NT$15 expression 
            {
              Symbol RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Symbol) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_expression",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // for_expression ::= expression SEMICOLON expression SEMICOLON error 
            {
              Symbol RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                report_error("No tiene la tercera expresión del FOR", e);
                RESULT = new Symbol(-1);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_expression",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // switch_statement ::= SWITCH RBO expression RBC switch_cases 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_statement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$16 ::= 
            {
              Symbol RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                report_error("No tiene paréntesis abierto al inicio de la expresión", e);
                RESULT = new Symbol(-1);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // switch_statement ::= SWITCH error NT$16 expression RBC switch_cases 
            {
              Symbol RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Symbol) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_statement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$17 ::= 
            {
              Symbol RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                report_error("No tiene expresión para el SWITCH", e);
                RESULT = new Symbol(-1);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // switch_statement ::= SWITCH RBO error NT$17 RBC switch_cases 
            {
              Symbol RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Symbol) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_statement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NT$18 ::= 
            {
              Symbol RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                report_error("No tiene paréntesis cerrado al final de la expresión", e);
                RESULT = new Symbol(-1);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // switch_statement ::= SWITCH RBO expression error NT$18 switch_cases 
            {
              Symbol RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Symbol) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_statement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // switch_statement ::= SWITCH RBO expression RBC error 
            {
              Symbol RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                report_error("No tiene bloque de cases", e);
                RESULT = new Symbol(-1);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_statement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // switch_cases ::= 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_cases",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // switch_cases ::= switch_cases switch_case default_case 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_cases",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // switch_case ::= CASE value COLON CBO statements CBC BREAK SEMICOLON 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_case",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // switch_case ::= CASE value COLON 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_case",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // switch_case ::= CASE value COLON BREAK SEMICOLON 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_case",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // default_case ::= DEFAULT COLON CBO statements CBC BREAK SEMICOLON 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("default_case",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // default_case ::= DEFAULT COLON 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("default_case",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // default_case ::= DEFAULT COLON BREAK SEMICOLON 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("default_case",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // return_statement ::= RETURN expression 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_statement",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // return_statement ::= RETURN 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_statement",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expression ::= RBO expression RBC expression_after_bracket 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expression ::= MINUS expression 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expression ::= expression EQUAL_EQUAL expression 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expression ::= expression NOT_EQUAL expression 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expression ::= expression GREATER_EQUAL expression 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expression ::= expression GREATER expression 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expression ::= expression LESS_EQUAL expression 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expression ::= expression LESS expression 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expression ::= expression PLUS expression 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expression ::= expression MINUS expression 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expression ::= expression TIMES expression 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expression ::= expression DIV expression 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expression ::= expression MODULE expression 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expression ::= NOT expression 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expression ::= value 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expression ::= IDENTIFIER RBO parameters_list RBC 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expression ::= boolean_value 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expression_after_bracket ::= opt_expression 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_after_bracket",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expression_after_bracket ::= INCREMENT 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_after_bracket",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expression_after_bracket ::= DECREMENT 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_after_bracket",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // assignment_op ::= PLUS_ASSIGNMENT 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_op",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // assignment_op ::= MINUS_ASSIGNMENT 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_op",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // assignment_op ::= TIMES_ASSIGNMENT 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_op",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // assignment_op ::= DIV_ASSIGNMENT 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_op",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // assignment_op ::= MOD_ASSIGNMENT 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_op",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // opt_expression ::= 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt_expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // opt_expression ::= arithmetic_op expression 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt_expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // opt_expression ::= AND expression 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt_expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // opt_expression ::= OR expression 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt_expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // assignment_expression ::= IDENTIFIER EQUAL expression SEMICOLON 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // parameters_list ::= 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // parameters_list ::= params 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // params ::= expression 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // params ::= params COMMA expression 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // variable ::= type IDENTIFIER 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // type ::= INT 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // type ::= CHAR 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // type ::= LONG 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // type ::= SHORT 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // value ::= DEC_LIT 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // value ::= OCTAL_LIT 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // value ::= HEX_LIT 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // value ::= DOUBLE_LIT 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // value ::= CHAR_LIT 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // value ::= IDENTIFIER 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // boolean_value ::= TRUE 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_value",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // boolean_value ::= FALSE 
            {
              Symbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_value",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
